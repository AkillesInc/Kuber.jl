# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

immutable DefaultApi <: SwaggerApi
    client::Swagger.Client
end

"""

connect DELETE requests to proxy of Pod
Param: name::String (required)
Param: namespace::String (required)
Param: path::String
Return: String
"""
function connectCoreV1DeleteNamespacedPodProxy(_api::DefaultApi, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", String, "/api/v1/namespaces/{namespace}/pods/{name}/proxy", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect DELETE requests to proxy of Pod
Param: name::String (required)
Param: namespace::String (required)
Param: path::String (required)
Param: path2::String
Return: String
"""
function connectCoreV1DeleteNamespacedPodProxyWithPath(_api::DefaultApi, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", String, "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_param(_ctx.query, "path", path2)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect DELETE requests to proxy of Service
Param: name::String (required)
Param: namespace::String (required)
Param: path::String
Return: String
"""
function connectCoreV1DeleteNamespacedServiceProxy(_api::DefaultApi, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", String, "/api/v1/namespaces/{namespace}/services/{name}/proxy", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect DELETE requests to proxy of Service
Param: name::String (required)
Param: namespace::String (required)
Param: path::String (required)
Param: path2::String
Return: String
"""
function connectCoreV1DeleteNamespacedServiceProxyWithPath(_api::DefaultApi, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", String, "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_param(_ctx.query, "path", path2)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect DELETE requests to proxy of Node
Param: name::String (required)
Param: path::String
Return: String
"""
function connectCoreV1DeleteNodeProxy(_api::DefaultApi, name::String; path=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", String, "/api/v1/nodes/{name}/proxy", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect DELETE requests to proxy of Node
Param: name::String (required)
Param: path::String (required)
Param: path2::String
Return: String
"""
function connectCoreV1DeleteNodeProxyWithPath(_api::DefaultApi, name::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", String, "/api/v1/nodes/{name}/proxy/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_param(_ctx.query, "path", path2)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect GET requests to attach of Pod
Param: name::String (required)
Param: namespace::String (required)
Param: container::String
Param: stderr::Bool
Param: stdin::Bool
Param: stdout::Bool
Param: tty::Bool
Return: String
"""
function connectCoreV1GetNamespacedPodAttach(_api::DefaultApi, name::String, namespace::String; container=nothing, stderr=nothing, stdin=nothing, stdout=nothing, tty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", String, "/api/v1/namespaces/{namespace}/pods/{name}/attach", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "container", container)  # type String
    Swagger.set_param(_ctx.query, "stderr", stderr)  # type Bool
    Swagger.set_param(_ctx.query, "stdin", stdin)  # type Bool
    Swagger.set_param(_ctx.query, "stdout", stdout)  # type Bool
    Swagger.set_param(_ctx.query, "tty", tty)  # type Bool
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect GET requests to exec of Pod
Param: name::String (required)
Param: namespace::String (required)
Param: command::String
Param: container::String
Param: stderr::Bool
Param: stdin::Bool
Param: stdout::Bool
Param: tty::Bool
Return: String
"""
function connectCoreV1GetNamespacedPodExec(_api::DefaultApi, name::String, namespace::String; command=nothing, container=nothing, stderr=nothing, stdin=nothing, stdout=nothing, tty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", String, "/api/v1/namespaces/{namespace}/pods/{name}/exec", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "command", command)  # type String
    Swagger.set_param(_ctx.query, "container", container)  # type String
    Swagger.set_param(_ctx.query, "stderr", stderr)  # type Bool
    Swagger.set_param(_ctx.query, "stdin", stdin)  # type Bool
    Swagger.set_param(_ctx.query, "stdout", stdout)  # type Bool
    Swagger.set_param(_ctx.query, "tty", tty)  # type Bool
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect GET requests to portforward of Pod
Param: name::String (required)
Param: namespace::String (required)
Return: String
"""
function connectCoreV1GetNamespacedPodPortforward(_api::DefaultApi, name::String, namespace::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", String, "/api/v1/namespaces/{namespace}/pods/{name}/portforward", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect GET requests to proxy of Pod
Param: name::String (required)
Param: namespace::String (required)
Param: path::String
Return: String
"""
function connectCoreV1GetNamespacedPodProxy(_api::DefaultApi, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", String, "/api/v1/namespaces/{namespace}/pods/{name}/proxy", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect GET requests to proxy of Pod
Param: name::String (required)
Param: namespace::String (required)
Param: path::String (required)
Param: path2::String
Return: String
"""
function connectCoreV1GetNamespacedPodProxyWithPath(_api::DefaultApi, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", String, "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_param(_ctx.query, "path", path2)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect GET requests to proxy of Service
Param: name::String (required)
Param: namespace::String (required)
Param: path::String
Return: String
"""
function connectCoreV1GetNamespacedServiceProxy(_api::DefaultApi, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", String, "/api/v1/namespaces/{namespace}/services/{name}/proxy", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect GET requests to proxy of Service
Param: name::String (required)
Param: namespace::String (required)
Param: path::String (required)
Param: path2::String
Return: String
"""
function connectCoreV1GetNamespacedServiceProxyWithPath(_api::DefaultApi, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", String, "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_param(_ctx.query, "path", path2)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect GET requests to proxy of Node
Param: name::String (required)
Param: path::String
Return: String
"""
function connectCoreV1GetNodeProxy(_api::DefaultApi, name::String; path=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", String, "/api/v1/nodes/{name}/proxy", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect GET requests to proxy of Node
Param: name::String (required)
Param: path::String (required)
Param: path2::String
Return: String
"""
function connectCoreV1GetNodeProxyWithPath(_api::DefaultApi, name::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", String, "/api/v1/nodes/{name}/proxy/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_param(_ctx.query, "path", path2)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect HEAD requests to proxy of Pod
Param: name::String (required)
Param: namespace::String (required)
Param: path::String
Return: String
"""
function connectCoreV1HeadNamespacedPodProxy(_api::DefaultApi, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "HEAD", String, "/api/v1/namespaces/{namespace}/pods/{name}/proxy", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect HEAD requests to proxy of Pod
Param: name::String (required)
Param: namespace::String (required)
Param: path::String (required)
Param: path2::String
Return: String
"""
function connectCoreV1HeadNamespacedPodProxyWithPath(_api::DefaultApi, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "HEAD", String, "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_param(_ctx.query, "path", path2)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect HEAD requests to proxy of Service
Param: name::String (required)
Param: namespace::String (required)
Param: path::String
Return: String
"""
function connectCoreV1HeadNamespacedServiceProxy(_api::DefaultApi, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "HEAD", String, "/api/v1/namespaces/{namespace}/services/{name}/proxy", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect HEAD requests to proxy of Service
Param: name::String (required)
Param: namespace::String (required)
Param: path::String (required)
Param: path2::String
Return: String
"""
function connectCoreV1HeadNamespacedServiceProxyWithPath(_api::DefaultApi, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "HEAD", String, "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_param(_ctx.query, "path", path2)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect HEAD requests to proxy of Node
Param: name::String (required)
Param: path::String
Return: String
"""
function connectCoreV1HeadNodeProxy(_api::DefaultApi, name::String; path=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "HEAD", String, "/api/v1/nodes/{name}/proxy", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect HEAD requests to proxy of Node
Param: name::String (required)
Param: path::String (required)
Param: path2::String
Return: String
"""
function connectCoreV1HeadNodeProxyWithPath(_api::DefaultApi, name::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "HEAD", String, "/api/v1/nodes/{name}/proxy/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_param(_ctx.query, "path", path2)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect OPTIONS requests to proxy of Pod
Param: name::String (required)
Param: namespace::String (required)
Param: path::String
Return: String
"""
function connectCoreV1OptionsNamespacedPodProxy(_api::DefaultApi, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "OPTIONS", String, "/api/v1/namespaces/{namespace}/pods/{name}/proxy", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect OPTIONS requests to proxy of Pod
Param: name::String (required)
Param: namespace::String (required)
Param: path::String (required)
Param: path2::String
Return: String
"""
function connectCoreV1OptionsNamespacedPodProxyWithPath(_api::DefaultApi, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "OPTIONS", String, "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_param(_ctx.query, "path", path2)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect OPTIONS requests to proxy of Service
Param: name::String (required)
Param: namespace::String (required)
Param: path::String
Return: String
"""
function connectCoreV1OptionsNamespacedServiceProxy(_api::DefaultApi, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "OPTIONS", String, "/api/v1/namespaces/{namespace}/services/{name}/proxy", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect OPTIONS requests to proxy of Service
Param: name::String (required)
Param: namespace::String (required)
Param: path::String (required)
Param: path2::String
Return: String
"""
function connectCoreV1OptionsNamespacedServiceProxyWithPath(_api::DefaultApi, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "OPTIONS", String, "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_param(_ctx.query, "path", path2)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect OPTIONS requests to proxy of Node
Param: name::String (required)
Param: path::String
Return: String
"""
function connectCoreV1OptionsNodeProxy(_api::DefaultApi, name::String; path=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "OPTIONS", String, "/api/v1/nodes/{name}/proxy", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect OPTIONS requests to proxy of Node
Param: name::String (required)
Param: path::String (required)
Param: path2::String
Return: String
"""
function connectCoreV1OptionsNodeProxyWithPath(_api::DefaultApi, name::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "OPTIONS", String, "/api/v1/nodes/{name}/proxy/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_param(_ctx.query, "path", path2)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect POST requests to attach of Pod
Param: name::String (required)
Param: namespace::String (required)
Param: container::String
Param: stderr::Bool
Param: stdin::Bool
Param: stdout::Bool
Param: tty::Bool
Return: String
"""
function connectCoreV1PostNamespacedPodAttach(_api::DefaultApi, name::String, namespace::String; container=nothing, stderr=nothing, stdin=nothing, stdout=nothing, tty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", String, "/api/v1/namespaces/{namespace}/pods/{name}/attach", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "container", container)  # type String
    Swagger.set_param(_ctx.query, "stderr", stderr)  # type Bool
    Swagger.set_param(_ctx.query, "stdin", stdin)  # type Bool
    Swagger.set_param(_ctx.query, "stdout", stdout)  # type Bool
    Swagger.set_param(_ctx.query, "tty", tty)  # type Bool
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect POST requests to exec of Pod
Param: name::String (required)
Param: namespace::String (required)
Param: command::String
Param: container::String
Param: stderr::Bool
Param: stdin::Bool
Param: stdout::Bool
Param: tty::Bool
Return: String
"""
function connectCoreV1PostNamespacedPodExec(_api::DefaultApi, name::String, namespace::String; command=nothing, container=nothing, stderr=nothing, stdin=nothing, stdout=nothing, tty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", String, "/api/v1/namespaces/{namespace}/pods/{name}/exec", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "command", command)  # type String
    Swagger.set_param(_ctx.query, "container", container)  # type String
    Swagger.set_param(_ctx.query, "stderr", stderr)  # type Bool
    Swagger.set_param(_ctx.query, "stdin", stdin)  # type Bool
    Swagger.set_param(_ctx.query, "stdout", stdout)  # type Bool
    Swagger.set_param(_ctx.query, "tty", tty)  # type Bool
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect POST requests to portforward of Pod
Param: name::String (required)
Param: namespace::String (required)
Return: String
"""
function connectCoreV1PostNamespacedPodPortforward(_api::DefaultApi, name::String, namespace::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", String, "/api/v1/namespaces/{namespace}/pods/{name}/portforward", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect POST requests to proxy of Pod
Param: name::String (required)
Param: namespace::String (required)
Param: path::String
Return: String
"""
function connectCoreV1PostNamespacedPodProxy(_api::DefaultApi, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", String, "/api/v1/namespaces/{namespace}/pods/{name}/proxy", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect POST requests to proxy of Pod
Param: name::String (required)
Param: namespace::String (required)
Param: path::String (required)
Param: path2::String
Return: String
"""
function connectCoreV1PostNamespacedPodProxyWithPath(_api::DefaultApi, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", String, "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_param(_ctx.query, "path", path2)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect POST requests to proxy of Service
Param: name::String (required)
Param: namespace::String (required)
Param: path::String
Return: String
"""
function connectCoreV1PostNamespacedServiceProxy(_api::DefaultApi, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", String, "/api/v1/namespaces/{namespace}/services/{name}/proxy", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect POST requests to proxy of Service
Param: name::String (required)
Param: namespace::String (required)
Param: path::String (required)
Param: path2::String
Return: String
"""
function connectCoreV1PostNamespacedServiceProxyWithPath(_api::DefaultApi, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", String, "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_param(_ctx.query, "path", path2)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect POST requests to proxy of Node
Param: name::String (required)
Param: path::String
Return: String
"""
function connectCoreV1PostNodeProxy(_api::DefaultApi, name::String; path=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", String, "/api/v1/nodes/{name}/proxy", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect POST requests to proxy of Node
Param: name::String (required)
Param: path::String (required)
Param: path2::String
Return: String
"""
function connectCoreV1PostNodeProxyWithPath(_api::DefaultApi, name::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", String, "/api/v1/nodes/{name}/proxy/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_param(_ctx.query, "path", path2)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect PUT requests to proxy of Pod
Param: name::String (required)
Param: namespace::String (required)
Param: path::String
Return: String
"""
function connectCoreV1PutNamespacedPodProxy(_api::DefaultApi, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", String, "/api/v1/namespaces/{namespace}/pods/{name}/proxy", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect PUT requests to proxy of Pod
Param: name::String (required)
Param: namespace::String (required)
Param: path::String (required)
Param: path2::String
Return: String
"""
function connectCoreV1PutNamespacedPodProxyWithPath(_api::DefaultApi, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", String, "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_param(_ctx.query, "path", path2)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect PUT requests to proxy of Service
Param: name::String (required)
Param: namespace::String (required)
Param: path::String
Return: String
"""
function connectCoreV1PutNamespacedServiceProxy(_api::DefaultApi, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", String, "/api/v1/namespaces/{namespace}/services/{name}/proxy", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect PUT requests to proxy of Service
Param: name::String (required)
Param: namespace::String (required)
Param: path::String (required)
Param: path2::String
Return: String
"""
function connectCoreV1PutNamespacedServiceProxyWithPath(_api::DefaultApi, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", String, "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_param(_ctx.query, "path", path2)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect PUT requests to proxy of Node
Param: name::String (required)
Param: path::String
Return: String
"""
function connectCoreV1PutNodeProxy(_api::DefaultApi, name::String; path=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", String, "/api/v1/nodes/{name}/proxy", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

connect PUT requests to proxy of Node
Param: name::String (required)
Param: path::String (required)
Param: path2::String
Return: String
"""
function connectCoreV1PutNodeProxyWithPath(_api::DefaultApi, name::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", String, "/api/v1/nodes/{name}/proxy/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_param(_ctx.query, "path", path2)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a PetSet
Param: namespace::String (required)
Param: body::V1alpha1PetSet (required)
Param: pretty::String
Return: V1alpha1PetSet
"""
function createAppsV1alpha1NamespacedPetSet(_api::DefaultApi, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1alpha1PetSet, "/apis/apps/v1alpha1/namespaces/{namespace}/petsets", [], body)
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a TokenReview
Param: body::V1beta1TokenReview (required)
Param: pretty::String
Return: V1beta1TokenReview
"""
function createAuthenticationV1beta1TokenReview(_api::DefaultApi, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1beta1TokenReview, "/apis/authentication.k8s.io/v1beta1/tokenreviews", [], body)
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a LocalSubjectAccessReview
Param: body::V1beta1LocalSubjectAccessReview (required)
Param: namespace::String (required)
Param: pretty::String
Return: V1beta1LocalSubjectAccessReview
"""
function createAuthorizationV1beta1NamespacedLocalSubjectAccessReview(_api::DefaultApi, body, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1beta1LocalSubjectAccessReview, "/apis/authorization.k8s.io/v1beta1/namespaces/{namespace}/localsubjectaccessreviews", [], body)
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a SelfSubjectAccessReview
Param: body::V1beta1SelfSubjectAccessReview (required)
Param: pretty::String
Return: V1beta1SelfSubjectAccessReview
"""
function createAuthorizationV1beta1SelfSubjectAccessReview(_api::DefaultApi, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1beta1SelfSubjectAccessReview, "/apis/authorization.k8s.io/v1beta1/selfsubjectaccessreviews", [], body)
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a SubjectAccessReview
Param: body::V1beta1SubjectAccessReview (required)
Param: pretty::String
Return: V1beta1SubjectAccessReview
"""
function createAuthorizationV1beta1SubjectAccessReview(_api::DefaultApi, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1beta1SubjectAccessReview, "/apis/authorization.k8s.io/v1beta1/subjectaccessreviews", [], body)
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a HorizontalPodAutoscaler
Param: namespace::String (required)
Param: body::V1HorizontalPodAutoscaler (required)
Param: pretty::String
Return: V1HorizontalPodAutoscaler
"""
function createAutoscalingV1NamespacedHorizontalPodAutoscaler(_api::DefaultApi, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1HorizontalPodAutoscaler, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers", [], body)
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a Job
Param: namespace::String (required)
Param: body::V1Job (required)
Param: pretty::String
Return: V1Job
"""
function createBatchV1NamespacedJob(_api::DefaultApi, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1Job, "/apis/batch/v1/namespaces/{namespace}/jobs", [], body)
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a CertificateSigningRequest
Param: body::V1alpha1CertificateSigningRequest (required)
Param: pretty::String
Return: V1alpha1CertificateSigningRequest
"""
function createCertificatesV1alpha1CertificateSigningRequest(_api::DefaultApi, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1alpha1CertificateSigningRequest, "/apis/certificates.k8s.io/v1alpha1/certificatesigningrequests", [], body)
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a Namespace
Param: body::V1Namespace (required)
Param: pretty::String
Return: V1Namespace
"""
function createCoreV1Namespace(_api::DefaultApi, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1Namespace, "/api/v1/namespaces", [], body)
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a Binding
Param: body::V1Binding (required)
Param: namespace::String (required)
Param: pretty::String
Return: V1Binding
"""
function createCoreV1NamespacedBinding(_api::DefaultApi, body, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1Binding, "/api/v1/namespaces/{namespace}/bindings", [], body)
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create binding of a Binding
Param: body::V1Binding (required)
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Return: V1Binding
"""
function createCoreV1NamespacedBindingBinding(_api::DefaultApi, body, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1Binding, "/api/v1/namespaces/{namespace}/pods/{name}/binding", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a ConfigMap
Param: namespace::String (required)
Param: body::V1ConfigMap (required)
Param: pretty::String
Return: V1ConfigMap
"""
function createCoreV1NamespacedConfigMap(_api::DefaultApi, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1ConfigMap, "/api/v1/namespaces/{namespace}/configmaps", [], body)
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a Endpoints
Param: namespace::String (required)
Param: body::V1Endpoints (required)
Param: pretty::String
Return: V1Endpoints
"""
function createCoreV1NamespacedEndpoints(_api::DefaultApi, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1Endpoints, "/api/v1/namespaces/{namespace}/endpoints", [], body)
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a Event
Param: namespace::String (required)
Param: body::V1Event (required)
Param: pretty::String
Return: V1Event
"""
function createCoreV1NamespacedEvent(_api::DefaultApi, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1Event, "/api/v1/namespaces/{namespace}/events", [], body)
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create eviction of a Eviction
Param: body::V1alpha1Eviction (required)
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Return: V1alpha1Eviction
"""
function createCoreV1NamespacedEvictionEviction(_api::DefaultApi, body, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1alpha1Eviction, "/api/v1/namespaces/{namespace}/pods/{name}/eviction", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a LimitRange
Param: namespace::String (required)
Param: body::V1LimitRange (required)
Param: pretty::String
Return: V1LimitRange
"""
function createCoreV1NamespacedLimitRange(_api::DefaultApi, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1LimitRange, "/api/v1/namespaces/{namespace}/limitranges", [], body)
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a PersistentVolumeClaim
Param: namespace::String (required)
Param: body::V1PersistentVolumeClaim (required)
Param: pretty::String
Return: V1PersistentVolumeClaim
"""
function createCoreV1NamespacedPersistentVolumeClaim(_api::DefaultApi, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1PersistentVolumeClaim, "/api/v1/namespaces/{namespace}/persistentvolumeclaims", [], body)
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a Pod
Param: namespace::String (required)
Param: body::V1Pod (required)
Param: pretty::String
Return: V1Pod
"""
function createCoreV1NamespacedPod(_api::DefaultApi, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1Pod, "/api/v1/namespaces/{namespace}/pods", [], body)
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a PodTemplate
Param: namespace::String (required)
Param: body::V1PodTemplate (required)
Param: pretty::String
Return: V1PodTemplate
"""
function createCoreV1NamespacedPodTemplate(_api::DefaultApi, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1PodTemplate, "/api/v1/namespaces/{namespace}/podtemplates", [], body)
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a ReplicationController
Param: namespace::String (required)
Param: body::V1ReplicationController (required)
Param: pretty::String
Return: V1ReplicationController
"""
function createCoreV1NamespacedReplicationController(_api::DefaultApi, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1ReplicationController, "/api/v1/namespaces/{namespace}/replicationcontrollers", [], body)
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a ResourceQuota
Param: namespace::String (required)
Param: body::V1ResourceQuota (required)
Param: pretty::String
Return: V1ResourceQuota
"""
function createCoreV1NamespacedResourceQuota(_api::DefaultApi, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1ResourceQuota, "/api/v1/namespaces/{namespace}/resourcequotas", [], body)
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a Secret
Param: namespace::String (required)
Param: body::V1Secret (required)
Param: pretty::String
Return: V1Secret
"""
function createCoreV1NamespacedSecret(_api::DefaultApi, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1Secret, "/api/v1/namespaces/{namespace}/secrets", [], body)
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a Service
Param: namespace::String (required)
Param: body::V1Service (required)
Param: pretty::String
Return: V1Service
"""
function createCoreV1NamespacedService(_api::DefaultApi, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1Service, "/api/v1/namespaces/{namespace}/services", [], body)
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a ServiceAccount
Param: namespace::String (required)
Param: body::V1ServiceAccount (required)
Param: pretty::String
Return: V1ServiceAccount
"""
function createCoreV1NamespacedServiceAccount(_api::DefaultApi, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1ServiceAccount, "/api/v1/namespaces/{namespace}/serviceaccounts", [], body)
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a Node
Param: body::V1Node (required)
Param: pretty::String
Return: V1Node
"""
function createCoreV1Node(_api::DefaultApi, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1Node, "/api/v1/nodes", [], body)
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a PersistentVolume
Param: body::V1PersistentVolume (required)
Param: pretty::String
Return: V1PersistentVolume
"""
function createCoreV1PersistentVolume(_api::DefaultApi, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1PersistentVolume, "/api/v1/persistentvolumes", [], body)
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a DaemonSet
Param: namespace::String (required)
Param: body::V1beta1DaemonSet (required)
Param: pretty::String
Return: V1beta1DaemonSet
"""
function createExtensionsV1beta1NamespacedDaemonSet(_api::DefaultApi, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1beta1DaemonSet, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets", [], body)
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a Deployment
Param: namespace::String (required)
Param: body::V1beta1Deployment (required)
Param: pretty::String
Return: V1beta1Deployment
"""
function createExtensionsV1beta1NamespacedDeployment(_api::DefaultApi, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1beta1Deployment, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments", [], body)
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create rollback of a DeploymentRollback
Param: body::V1beta1DeploymentRollback (required)
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Return: V1beta1DeploymentRollback
"""
function createExtensionsV1beta1NamespacedDeploymentRollbackRollback(_api::DefaultApi, body, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1beta1DeploymentRollback, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/rollback", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a HorizontalPodAutoscaler
Param: namespace::String (required)
Param: body::V1beta1HorizontalPodAutoscaler (required)
Param: pretty::String
Return: V1beta1HorizontalPodAutoscaler
"""
function createExtensionsV1beta1NamespacedHorizontalPodAutoscaler(_api::DefaultApi, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1beta1HorizontalPodAutoscaler, "/apis/extensions/v1beta1/namespaces/{namespace}/horizontalpodautoscalers", [], body)
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a Ingress
Param: namespace::String (required)
Param: body::V1beta1Ingress (required)
Param: pretty::String
Return: V1beta1Ingress
"""
function createExtensionsV1beta1NamespacedIngress(_api::DefaultApi, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1beta1Ingress, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses", [], body)
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a Job
Param: namespace::String (required)
Param: body::V1beta1Job (required)
Param: pretty::String
Return: V1beta1Job
"""
function createExtensionsV1beta1NamespacedJob(_api::DefaultApi, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1beta1Job, "/apis/extensions/v1beta1/namespaces/{namespace}/jobs", [], body)
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a NetworkPolicy
Param: namespace::String (required)
Param: body::V1beta1NetworkPolicy (required)
Param: pretty::String
Return: V1beta1NetworkPolicy
"""
function createExtensionsV1beta1NamespacedNetworkPolicy(_api::DefaultApi, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1beta1NetworkPolicy, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies", [], body)
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a ReplicaSet
Param: namespace::String (required)
Param: body::V1beta1ReplicaSet (required)
Param: pretty::String
Return: V1beta1ReplicaSet
"""
function createExtensionsV1beta1NamespacedReplicaSet(_api::DefaultApi, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1beta1ReplicaSet, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets", [], body)
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a ThirdPartyResource
Param: body::V1beta1ThirdPartyResource (required)
Param: pretty::String
Return: V1beta1ThirdPartyResource
"""
function createExtensionsV1beta1ThirdPartyResource(_api::DefaultApi, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1beta1ThirdPartyResource, "/apis/extensions/v1beta1/thirdpartyresources", [], body)
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a PodDisruptionBudget
Param: namespace::String (required)
Param: body::V1alpha1PodDisruptionBudget (required)
Param: pretty::String
Return: V1alpha1PodDisruptionBudget
"""
function createPolicyV1alpha1NamespacedPodDisruptionBudget(_api::DefaultApi, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1alpha1PodDisruptionBudget, "/apis/policy/v1alpha1/namespaces/{namespace}/poddisruptionbudgets", [], body)
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a ClusterRole
Param: body::V1alpha1ClusterRole (required)
Param: pretty::String
Return: V1alpha1ClusterRole
"""
function createRbacAuthorizationV1alpha1ClusterRole(_api::DefaultApi, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1alpha1ClusterRole, "/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles", [], body)
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a ClusterRoleBinding
Param: body::V1alpha1ClusterRoleBinding (required)
Param: pretty::String
Return: V1alpha1ClusterRoleBinding
"""
function createRbacAuthorizationV1alpha1ClusterRoleBinding(_api::DefaultApi, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1alpha1ClusterRoleBinding, "/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings", [], body)
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a Role
Param: namespace::String (required)
Param: body::V1alpha1Role (required)
Param: pretty::String
Return: V1alpha1Role
"""
function createRbacAuthorizationV1alpha1NamespacedRole(_api::DefaultApi, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1alpha1Role, "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles", [], body)
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a RoleBinding
Param: namespace::String (required)
Param: body::V1alpha1RoleBinding (required)
Param: pretty::String
Return: V1alpha1RoleBinding
"""
function createRbacAuthorizationV1alpha1NamespacedRoleBinding(_api::DefaultApi, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1alpha1RoleBinding, "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings", [], body)
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

create a StorageClass
Param: body::V1beta1StorageClass (required)
Param: pretty::String
Return: V1beta1StorageClass
"""
function createStorageV1beta1StorageClass(_api::DefaultApi, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", V1beta1StorageClass, "/apis/storage.k8s.io/v1beta1/storageclasses", [], body)
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete collection of PetSet
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: UnversionedStatus
"""
function deleteAppsV1alpha1CollectionNamespacedPetSet(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/apps/v1alpha1/namespaces/{namespace}/petsets", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete a PetSet
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1DeleteOptions (required)
Param: pretty::String
Return: UnversionedStatus
"""
function deleteAppsV1alpha1NamespacedPetSet(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/apps/v1alpha1/namespaces/{namespace}/petsets/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete collection of HorizontalPodAutoscaler
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: UnversionedStatus
"""
function deleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscaler(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete a HorizontalPodAutoscaler
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1DeleteOptions (required)
Param: pretty::String
Return: UnversionedStatus
"""
function deleteAutoscalingV1NamespacedHorizontalPodAutoscaler(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete collection of Job
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: UnversionedStatus
"""
function deleteBatchV1CollectionNamespacedJob(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/batch/v1/namespaces/{namespace}/jobs", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete a Job
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1DeleteOptions (required)
Param: pretty::String
Return: UnversionedStatus
"""
function deleteBatchV1NamespacedJob(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/batch/v1/namespaces/{namespace}/jobs/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete a CertificateSigningRequest
Param: name::String (required)
Param: body::V1DeleteOptions (required)
Param: pretty::String
Return: UnversionedStatus
"""
function deleteCertificatesV1alpha1CertificateSigningRequest(_api::DefaultApi, name::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/certificates.k8s.io/v1alpha1/certificatesigningrequests/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete collection of CertificateSigningRequest
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: UnversionedStatus
"""
function deleteCertificatesV1alpha1CollectionCertificateSigningRequest(_api::DefaultApi; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/certificates.k8s.io/v1alpha1/certificatesigningrequests", [])
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete collection of Namespace
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: UnversionedStatus
"""
function deleteCoreV1CollectionNamespace(_api::DefaultApi; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/api/v1/namespaces", [])
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete collection of ConfigMap
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: UnversionedStatus
"""
function deleteCoreV1CollectionNamespacedConfigMap(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/api/v1/namespaces/{namespace}/configmaps", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete collection of Endpoints
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: UnversionedStatus
"""
function deleteCoreV1CollectionNamespacedEndpoints(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/api/v1/namespaces/{namespace}/endpoints", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete collection of Event
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: UnversionedStatus
"""
function deleteCoreV1CollectionNamespacedEvent(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/api/v1/namespaces/{namespace}/events", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete collection of LimitRange
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: UnversionedStatus
"""
function deleteCoreV1CollectionNamespacedLimitRange(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/api/v1/namespaces/{namespace}/limitranges", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete collection of PersistentVolumeClaim
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: UnversionedStatus
"""
function deleteCoreV1CollectionNamespacedPersistentVolumeClaim(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/api/v1/namespaces/{namespace}/persistentvolumeclaims", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete collection of Pod
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: UnversionedStatus
"""
function deleteCoreV1CollectionNamespacedPod(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/api/v1/namespaces/{namespace}/pods", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete collection of PodTemplate
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: UnversionedStatus
"""
function deleteCoreV1CollectionNamespacedPodTemplate(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/api/v1/namespaces/{namespace}/podtemplates", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete collection of ReplicationController
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: UnversionedStatus
"""
function deleteCoreV1CollectionNamespacedReplicationController(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/api/v1/namespaces/{namespace}/replicationcontrollers", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete collection of ResourceQuota
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: UnversionedStatus
"""
function deleteCoreV1CollectionNamespacedResourceQuota(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/api/v1/namespaces/{namespace}/resourcequotas", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete collection of Secret
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: UnversionedStatus
"""
function deleteCoreV1CollectionNamespacedSecret(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/api/v1/namespaces/{namespace}/secrets", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete collection of ServiceAccount
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: UnversionedStatus
"""
function deleteCoreV1CollectionNamespacedServiceAccount(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/api/v1/namespaces/{namespace}/serviceaccounts", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete collection of Node
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: UnversionedStatus
"""
function deleteCoreV1CollectionNode(_api::DefaultApi; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/api/v1/nodes", [])
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete collection of PersistentVolume
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: UnversionedStatus
"""
function deleteCoreV1CollectionPersistentVolume(_api::DefaultApi; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/api/v1/persistentvolumes", [])
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete a Namespace
Param: name::String (required)
Param: body::V1DeleteOptions (required)
Param: pretty::String
Return: UnversionedStatus
"""
function deleteCoreV1Namespace(_api::DefaultApi, name::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/api/v1/namespaces/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete a ConfigMap
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1DeleteOptions (required)
Param: pretty::String
Return: UnversionedStatus
"""
function deleteCoreV1NamespacedConfigMap(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/api/v1/namespaces/{namespace}/configmaps/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete a Endpoints
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1DeleteOptions (required)
Param: pretty::String
Return: UnversionedStatus
"""
function deleteCoreV1NamespacedEndpoints(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/api/v1/namespaces/{namespace}/endpoints/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete a Event
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1DeleteOptions (required)
Param: pretty::String
Return: UnversionedStatus
"""
function deleteCoreV1NamespacedEvent(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/api/v1/namespaces/{namespace}/events/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete a LimitRange
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1DeleteOptions (required)
Param: pretty::String
Return: UnversionedStatus
"""
function deleteCoreV1NamespacedLimitRange(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/api/v1/namespaces/{namespace}/limitranges/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete a PersistentVolumeClaim
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1DeleteOptions (required)
Param: pretty::String
Return: UnversionedStatus
"""
function deleteCoreV1NamespacedPersistentVolumeClaim(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete a Pod
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1DeleteOptions (required)
Param: pretty::String
Return: UnversionedStatus
"""
function deleteCoreV1NamespacedPod(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/api/v1/namespaces/{namespace}/pods/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete a PodTemplate
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1DeleteOptions (required)
Param: pretty::String
Return: UnversionedStatus
"""
function deleteCoreV1NamespacedPodTemplate(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/api/v1/namespaces/{namespace}/podtemplates/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete a ReplicationController
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1DeleteOptions (required)
Param: pretty::String
Return: UnversionedStatus
"""
function deleteCoreV1NamespacedReplicationController(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete a ResourceQuota
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1DeleteOptions (required)
Param: pretty::String
Return: UnversionedStatus
"""
function deleteCoreV1NamespacedResourceQuota(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/api/v1/namespaces/{namespace}/resourcequotas/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete a Secret
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1DeleteOptions (required)
Param: pretty::String
Return: UnversionedStatus
"""
function deleteCoreV1NamespacedSecret(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/api/v1/namespaces/{namespace}/secrets/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete a Service
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Return: UnversionedStatus
"""
function deleteCoreV1NamespacedService(_api::DefaultApi, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/api/v1/namespaces/{namespace}/services/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete a ServiceAccount
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1DeleteOptions (required)
Param: pretty::String
Return: UnversionedStatus
"""
function deleteCoreV1NamespacedServiceAccount(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/api/v1/namespaces/{namespace}/serviceaccounts/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete a Node
Param: name::String (required)
Param: body::V1DeleteOptions (required)
Param: pretty::String
Return: UnversionedStatus
"""
function deleteCoreV1Node(_api::DefaultApi, name::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/api/v1/nodes/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete a PersistentVolume
Param: name::String (required)
Param: body::V1DeleteOptions (required)
Param: pretty::String
Return: UnversionedStatus
"""
function deleteCoreV1PersistentVolume(_api::DefaultApi, name::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/api/v1/persistentvolumes/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete collection of DaemonSet
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: UnversionedStatus
"""
function deleteExtensionsV1beta1CollectionNamespacedDaemonSet(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete collection of Deployment
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: UnversionedStatus
"""
function deleteExtensionsV1beta1CollectionNamespacedDeployment(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete collection of HorizontalPodAutoscaler
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: UnversionedStatus
"""
function deleteExtensionsV1beta1CollectionNamespacedHorizontalPodAutoscaler(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/extensions/v1beta1/namespaces/{namespace}/horizontalpodautoscalers", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete collection of Ingress
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: UnversionedStatus
"""
function deleteExtensionsV1beta1CollectionNamespacedIngress(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete collection of Job
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: UnversionedStatus
"""
function deleteExtensionsV1beta1CollectionNamespacedJob(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/extensions/v1beta1/namespaces/{namespace}/jobs", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete collection of NetworkPolicy
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: UnversionedStatus
"""
function deleteExtensionsV1beta1CollectionNamespacedNetworkPolicy(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete collection of ReplicaSet
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: UnversionedStatus
"""
function deleteExtensionsV1beta1CollectionNamespacedReplicaSet(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete collection of ThirdPartyResource
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: UnversionedStatus
"""
function deleteExtensionsV1beta1CollectionThirdPartyResource(_api::DefaultApi; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/extensions/v1beta1/thirdpartyresources", [])
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete a DaemonSet
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1DeleteOptions (required)
Param: pretty::String
Return: UnversionedStatus
"""
function deleteExtensionsV1beta1NamespacedDaemonSet(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete a Deployment
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1DeleteOptions (required)
Param: pretty::String
Return: UnversionedStatus
"""
function deleteExtensionsV1beta1NamespacedDeployment(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete a HorizontalPodAutoscaler
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1DeleteOptions (required)
Param: pretty::String
Return: UnversionedStatus
"""
function deleteExtensionsV1beta1NamespacedHorizontalPodAutoscaler(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/extensions/v1beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete a Ingress
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1DeleteOptions (required)
Param: pretty::String
Return: UnversionedStatus
"""
function deleteExtensionsV1beta1NamespacedIngress(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete a Job
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1DeleteOptions (required)
Param: pretty::String
Return: UnversionedStatus
"""
function deleteExtensionsV1beta1NamespacedJob(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/extensions/v1beta1/namespaces/{namespace}/jobs/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete a NetworkPolicy
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1DeleteOptions (required)
Param: pretty::String
Return: UnversionedStatus
"""
function deleteExtensionsV1beta1NamespacedNetworkPolicy(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete a ReplicaSet
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1DeleteOptions (required)
Param: pretty::String
Return: UnversionedStatus
"""
function deleteExtensionsV1beta1NamespacedReplicaSet(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete a ThirdPartyResource
Param: name::String (required)
Param: body::V1DeleteOptions (required)
Param: pretty::String
Return: UnversionedStatus
"""
function deleteExtensionsV1beta1ThirdPartyResource(_api::DefaultApi, name::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/extensions/v1beta1/thirdpartyresources/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete collection of PodDisruptionBudget
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: UnversionedStatus
"""
function deletePolicyV1alpha1CollectionNamespacedPodDisruptionBudget(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/policy/v1alpha1/namespaces/{namespace}/poddisruptionbudgets", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete a PodDisruptionBudget
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1DeleteOptions (required)
Param: pretty::String
Return: UnversionedStatus
"""
function deletePolicyV1alpha1NamespacedPodDisruptionBudget(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/policy/v1alpha1/namespaces/{namespace}/poddisruptionbudgets/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete a ClusterRole
Param: name::String (required)
Param: body::V1DeleteOptions (required)
Param: pretty::String
Return: UnversionedStatus
"""
function deleteRbacAuthorizationV1alpha1ClusterRole(_api::DefaultApi, name::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete a ClusterRoleBinding
Param: name::String (required)
Param: body::V1DeleteOptions (required)
Param: pretty::String
Return: UnversionedStatus
"""
function deleteRbacAuthorizationV1alpha1ClusterRoleBinding(_api::DefaultApi, name::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete collection of ClusterRole
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: UnversionedStatus
"""
function deleteRbacAuthorizationV1alpha1CollectionClusterRole(_api::DefaultApi; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles", [])
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete collection of ClusterRoleBinding
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: UnversionedStatus
"""
function deleteRbacAuthorizationV1alpha1CollectionClusterRoleBinding(_api::DefaultApi; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings", [])
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete collection of Role
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: UnversionedStatus
"""
function deleteRbacAuthorizationV1alpha1CollectionNamespacedRole(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete collection of RoleBinding
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: UnversionedStatus
"""
function deleteRbacAuthorizationV1alpha1CollectionNamespacedRoleBinding(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete a Role
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1DeleteOptions (required)
Param: pretty::String
Return: UnversionedStatus
"""
function deleteRbacAuthorizationV1alpha1NamespacedRole(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete a RoleBinding
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1DeleteOptions (required)
Param: pretty::String
Return: UnversionedStatus
"""
function deleteRbacAuthorizationV1alpha1NamespacedRoleBinding(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete collection of StorageClass
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: UnversionedStatus
"""
function deleteStorageV1beta1CollectionStorageClass(_api::DefaultApi; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/storage.k8s.io/v1beta1/storageclasses", [])
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

delete a StorageClass
Param: name::String (required)
Param: body::V1DeleteOptions (required)
Param: pretty::String
Return: UnversionedStatus
"""
function deleteStorageV1beta1StorageClass(_api::DefaultApi, name::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", UnversionedStatus, "/apis/storage.k8s.io/v1beta1/storageclasses/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

get available API versions
Return: UnversionedAPIGroupList
"""
function getAPIVersions(_api::DefaultApi; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", UnversionedAPIGroupList, "/apis/", [])
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

get information of a group
Return: UnversionedAPIGroup
"""
function getAppsAPIGroup(_api::DefaultApi; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", UnversionedAPIGroup, "/apis/apps/", [])
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

get available resources
Return: UnversionedAPIResourceList
"""
function getAppsV1alpha1APIResources(_api::DefaultApi; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", UnversionedAPIResourceList, "/apis/apps/v1alpha1/", [])
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

get information of a group
Return: UnversionedAPIGroup
"""
function getAuthenticationAPIGroup(_api::DefaultApi; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", UnversionedAPIGroup, "/apis/authentication.k8s.io/", [])
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

get available resources
Return: UnversionedAPIResourceList
"""
function getAuthenticationV1beta1APIResources(_api::DefaultApi; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", UnversionedAPIResourceList, "/apis/authentication.k8s.io/v1beta1/", [])
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

get information of a group
Return: UnversionedAPIGroup
"""
function getAuthorizationAPIGroup(_api::DefaultApi; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", UnversionedAPIGroup, "/apis/authorization.k8s.io/", [])
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

get available resources
Return: UnversionedAPIResourceList
"""
function getAuthorizationV1beta1APIResources(_api::DefaultApi; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", UnversionedAPIResourceList, "/apis/authorization.k8s.io/v1beta1/", [])
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

get information of a group
Return: UnversionedAPIGroup
"""
function getAutoscalingAPIGroup(_api::DefaultApi; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", UnversionedAPIGroup, "/apis/autoscaling/", [])
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

get available resources
Return: UnversionedAPIResourceList
"""
function getAutoscalingV1APIResources(_api::DefaultApi; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", UnversionedAPIResourceList, "/apis/autoscaling/v1/", [])
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

get information of a group
Return: UnversionedAPIGroup
"""
function getBatchAPIGroup(_api::DefaultApi; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", UnversionedAPIGroup, "/apis/batch/", [])
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

get available resources
Return: UnversionedAPIResourceList
"""
function getBatchV1APIResources(_api::DefaultApi; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", UnversionedAPIResourceList, "/apis/batch/v1/", [])
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

get available resources
Return: UnversionedAPIResourceList
"""
function getBatchV2alpha1APIResources(_api::DefaultApi; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", UnversionedAPIResourceList, "/apis/batch/v2alpha1/", [])
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

get information of a group
Return: UnversionedAPIGroup
"""
function getCertificatesAPIGroup(_api::DefaultApi; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", UnversionedAPIGroup, "/apis/certificates.k8s.io/", [])
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

get available resources
Return: UnversionedAPIResourceList
"""
function getCertificatesV1alpha1APIResources(_api::DefaultApi; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", UnversionedAPIResourceList, "/apis/certificates.k8s.io/v1alpha1/", [])
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

get the code version
Return: VersionInfo
"""
function getCodeVersion(_api::DefaultApi; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionInfo, "/version/", [])
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

get available API versions
Return: UnversionedAPIVersions
"""
function getCoreAPIVersions(_api::DefaultApi; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", UnversionedAPIVersions, "/api/", [])
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

get available resources
Return: UnversionedAPIResourceList
"""
function getCoreV1APIResources(_api::DefaultApi; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", UnversionedAPIResourceList, "/api/v1/", [])
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

get information of a group
Return: UnversionedAPIGroup
"""
function getExtensionsAPIGroup(_api::DefaultApi; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", UnversionedAPIGroup, "/apis/extensions/", [])
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

get available resources
Return: UnversionedAPIResourceList
"""
function getExtensionsV1beta1APIResources(_api::DefaultApi; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", UnversionedAPIResourceList, "/apis/extensions/v1beta1/", [])
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

get information of a group
Return: UnversionedAPIGroup
"""
function getPolicyAPIGroup(_api::DefaultApi; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", UnversionedAPIGroup, "/apis/policy/", [])
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

get available resources
Return: UnversionedAPIResourceList
"""
function getPolicyV1alpha1APIResources(_api::DefaultApi; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", UnversionedAPIResourceList, "/apis/policy/v1alpha1/", [])
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

get information of a group
Return: UnversionedAPIGroup
"""
function getRbacAuthorizationAPIGroup(_api::DefaultApi; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", UnversionedAPIGroup, "/apis/rbac.authorization.k8s.io/", [])
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

get available resources
Return: UnversionedAPIResourceList
"""
function getRbacAuthorizationV1alpha1APIResources(_api::DefaultApi; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", UnversionedAPIResourceList, "/apis/rbac.authorization.k8s.io/v1alpha1/", [])
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

get information of a group
Return: UnversionedAPIGroup
"""
function getStorageAPIGroup(_api::DefaultApi; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", UnversionedAPIGroup, "/apis/storage.k8s.io/", [])
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

get available resources
Return: UnversionedAPIResourceList
"""
function getStorageV1beta1APIResources(_api::DefaultApi; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", UnversionedAPIResourceList, "/apis/storage.k8s.io/v1beta1/", [])
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind PetSet
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1alpha1PetSetList
"""
function listAppsV1alpha1NamespacedPetSet(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1alpha1PetSetList, "/apis/apps/v1alpha1/namespaces/{namespace}/petsets", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind PetSet
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1alpha1PetSetList
"""
function listAppsV1alpha1PetSetForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1alpha1PetSetList, "/apis/apps/v1alpha1/petsets", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind HorizontalPodAutoscaler
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1HorizontalPodAutoscalerList
"""
function listAutoscalingV1HorizontalPodAutoscalerForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1HorizontalPodAutoscalerList, "/apis/autoscaling/v1/horizontalpodautoscalers", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind HorizontalPodAutoscaler
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1HorizontalPodAutoscalerList
"""
function listAutoscalingV1NamespacedHorizontalPodAutoscaler(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1HorizontalPodAutoscalerList, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind Job
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1JobList
"""
function listBatchV1JobForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1JobList, "/apis/batch/v1/jobs", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind Job
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1JobList
"""
function listBatchV1NamespacedJob(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1JobList, "/apis/batch/v1/namespaces/{namespace}/jobs", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind CertificateSigningRequest
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1alpha1CertificateSigningRequestList
"""
function listCertificatesV1alpha1CertificateSigningRequest(_api::DefaultApi; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1alpha1CertificateSigningRequestList, "/apis/certificates.k8s.io/v1alpha1/certificatesigningrequests", [])
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list objects of kind ComponentStatus
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1ComponentStatusList
"""
function listCoreV1ComponentStatus(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1ComponentStatusList, "/api/v1/componentstatuses", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind ConfigMap
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1ConfigMapList
"""
function listCoreV1ConfigMapForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1ConfigMapList, "/api/v1/configmaps", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind Endpoints
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1EndpointsList
"""
function listCoreV1EndpointsForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1EndpointsList, "/api/v1/endpoints", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind Event
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1EventList
"""
function listCoreV1EventForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1EventList, "/api/v1/events", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind LimitRange
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1LimitRangeList
"""
function listCoreV1LimitRangeForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1LimitRangeList, "/api/v1/limitranges", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind Namespace
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1NamespaceList
"""
function listCoreV1Namespace(_api::DefaultApi; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1NamespaceList, "/api/v1/namespaces", [])
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind ConfigMap
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1ConfigMapList
"""
function listCoreV1NamespacedConfigMap(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1ConfigMapList, "/api/v1/namespaces/{namespace}/configmaps", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind Endpoints
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1EndpointsList
"""
function listCoreV1NamespacedEndpoints(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1EndpointsList, "/api/v1/namespaces/{namespace}/endpoints", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind Event
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1EventList
"""
function listCoreV1NamespacedEvent(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1EventList, "/api/v1/namespaces/{namespace}/events", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind LimitRange
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1LimitRangeList
"""
function listCoreV1NamespacedLimitRange(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1LimitRangeList, "/api/v1/namespaces/{namespace}/limitranges", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind PersistentVolumeClaim
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1PersistentVolumeClaimList
"""
function listCoreV1NamespacedPersistentVolumeClaim(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1PersistentVolumeClaimList, "/api/v1/namespaces/{namespace}/persistentvolumeclaims", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind Pod
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1PodList
"""
function listCoreV1NamespacedPod(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1PodList, "/api/v1/namespaces/{namespace}/pods", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind PodTemplate
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1PodTemplateList
"""
function listCoreV1NamespacedPodTemplate(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1PodTemplateList, "/api/v1/namespaces/{namespace}/podtemplates", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind ReplicationController
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1ReplicationControllerList
"""
function listCoreV1NamespacedReplicationController(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1ReplicationControllerList, "/api/v1/namespaces/{namespace}/replicationcontrollers", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind ResourceQuota
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1ResourceQuotaList
"""
function listCoreV1NamespacedResourceQuota(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1ResourceQuotaList, "/api/v1/namespaces/{namespace}/resourcequotas", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind Secret
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1SecretList
"""
function listCoreV1NamespacedSecret(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1SecretList, "/api/v1/namespaces/{namespace}/secrets", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind Service
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1ServiceList
"""
function listCoreV1NamespacedService(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1ServiceList, "/api/v1/namespaces/{namespace}/services", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind ServiceAccount
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1ServiceAccountList
"""
function listCoreV1NamespacedServiceAccount(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1ServiceAccountList, "/api/v1/namespaces/{namespace}/serviceaccounts", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind Node
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1NodeList
"""
function listCoreV1Node(_api::DefaultApi; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1NodeList, "/api/v1/nodes", [])
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind PersistentVolume
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1PersistentVolumeList
"""
function listCoreV1PersistentVolume(_api::DefaultApi; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1PersistentVolumeList, "/api/v1/persistentvolumes", [])
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind PersistentVolumeClaim
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1PersistentVolumeClaimList
"""
function listCoreV1PersistentVolumeClaimForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1PersistentVolumeClaimList, "/api/v1/persistentvolumeclaims", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind Pod
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1PodList
"""
function listCoreV1PodForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1PodList, "/api/v1/pods", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind PodTemplate
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1PodTemplateList
"""
function listCoreV1PodTemplateForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1PodTemplateList, "/api/v1/podtemplates", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind ReplicationController
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1ReplicationControllerList
"""
function listCoreV1ReplicationControllerForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1ReplicationControllerList, "/api/v1/replicationcontrollers", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind ResourceQuota
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1ResourceQuotaList
"""
function listCoreV1ResourceQuotaForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1ResourceQuotaList, "/api/v1/resourcequotas", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind Secret
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1SecretList
"""
function listCoreV1SecretForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1SecretList, "/api/v1/secrets", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind ServiceAccount
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1ServiceAccountList
"""
function listCoreV1ServiceAccountForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1ServiceAccountList, "/api/v1/serviceaccounts", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind Service
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1ServiceList
"""
function listCoreV1ServiceForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1ServiceList, "/api/v1/services", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind DaemonSet
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1beta1DaemonSetList
"""
function listExtensionsV1beta1DaemonSetForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1beta1DaemonSetList, "/apis/extensions/v1beta1/daemonsets", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind Deployment
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1beta1DeploymentList
"""
function listExtensionsV1beta1DeploymentForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1beta1DeploymentList, "/apis/extensions/v1beta1/deployments", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind HorizontalPodAutoscaler
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1beta1HorizontalPodAutoscalerList
"""
function listExtensionsV1beta1HorizontalPodAutoscalerForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1beta1HorizontalPodAutoscalerList, "/apis/extensions/v1beta1/horizontalpodautoscalers", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind Ingress
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1beta1IngressList
"""
function listExtensionsV1beta1IngressForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1beta1IngressList, "/apis/extensions/v1beta1/ingresses", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind Job
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1beta1JobList
"""
function listExtensionsV1beta1JobForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1beta1JobList, "/apis/extensions/v1beta1/jobs", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind DaemonSet
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1beta1DaemonSetList
"""
function listExtensionsV1beta1NamespacedDaemonSet(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1beta1DaemonSetList, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind Deployment
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1beta1DeploymentList
"""
function listExtensionsV1beta1NamespacedDeployment(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1beta1DeploymentList, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind HorizontalPodAutoscaler
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1beta1HorizontalPodAutoscalerList
"""
function listExtensionsV1beta1NamespacedHorizontalPodAutoscaler(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1beta1HorizontalPodAutoscalerList, "/apis/extensions/v1beta1/namespaces/{namespace}/horizontalpodautoscalers", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind Ingress
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1beta1IngressList
"""
function listExtensionsV1beta1NamespacedIngress(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1beta1IngressList, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind Job
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1beta1JobList
"""
function listExtensionsV1beta1NamespacedJob(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1beta1JobList, "/apis/extensions/v1beta1/namespaces/{namespace}/jobs", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind NetworkPolicy
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1beta1NetworkPolicyList
"""
function listExtensionsV1beta1NamespacedNetworkPolicy(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1beta1NetworkPolicyList, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind ReplicaSet
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1beta1ReplicaSetList
"""
function listExtensionsV1beta1NamespacedReplicaSet(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1beta1ReplicaSetList, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind NetworkPolicy
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1beta1NetworkPolicyList
"""
function listExtensionsV1beta1NetworkPolicyForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1beta1NetworkPolicyList, "/apis/extensions/v1beta1/networkpolicies", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind ReplicaSet
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1beta1ReplicaSetList
"""
function listExtensionsV1beta1ReplicaSetForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1beta1ReplicaSetList, "/apis/extensions/v1beta1/replicasets", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind ThirdPartyResource
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1beta1ThirdPartyResourceList
"""
function listExtensionsV1beta1ThirdPartyResource(_api::DefaultApi; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1beta1ThirdPartyResourceList, "/apis/extensions/v1beta1/thirdpartyresources", [])
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind PodDisruptionBudget
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1alpha1PodDisruptionBudgetList
"""
function listPolicyV1alpha1NamespacedPodDisruptionBudget(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1alpha1PodDisruptionBudgetList, "/apis/policy/v1alpha1/namespaces/{namespace}/poddisruptionbudgets", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind PodDisruptionBudget
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1alpha1PodDisruptionBudgetList
"""
function listPolicyV1alpha1PodDisruptionBudgetForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1alpha1PodDisruptionBudgetList, "/apis/policy/v1alpha1/poddisruptionbudgets", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind ClusterRole
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1alpha1ClusterRoleList
"""
function listRbacAuthorizationV1alpha1ClusterRole(_api::DefaultApi; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1alpha1ClusterRoleList, "/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles", [])
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind ClusterRoleBinding
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1alpha1ClusterRoleBindingList
"""
function listRbacAuthorizationV1alpha1ClusterRoleBinding(_api::DefaultApi; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1alpha1ClusterRoleBindingList, "/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings", [])
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind Role
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1alpha1RoleList
"""
function listRbacAuthorizationV1alpha1NamespacedRole(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1alpha1RoleList, "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind RoleBinding
Param: namespace::String (required)
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1alpha1RoleBindingList
"""
function listRbacAuthorizationV1alpha1NamespacedRoleBinding(_api::DefaultApi, namespace::String; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1alpha1RoleBindingList, "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind RoleBinding
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1alpha1RoleBindingList
"""
function listRbacAuthorizationV1alpha1RoleBindingForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1alpha1RoleBindingList, "/apis/rbac.authorization.k8s.io/v1alpha1/rolebindings", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind Role
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1alpha1RoleList
"""
function listRbacAuthorizationV1alpha1RoleForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1alpha1RoleList, "/apis/rbac.authorization.k8s.io/v1alpha1/roles", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

list or watch objects of kind StorageClass
Param: pretty::String
Param: fieldSelector::String
Param: labelSelector::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: V1beta1StorageClassList
"""
function listStorageV1beta1StorageClass(_api::DefaultApi; pretty=nothing, fieldSelector=nothing, labelSelector=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1beta1StorageClassList, "/apis/storage.k8s.io/v1beta1/storageclasses", [])
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""


Param: logpath::String (required)
Return: Void
"""
function logFileHandler(_api::DefaultApi, logpath::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", Void, "/logs/{logpath}", [])
    Swagger.set_param(_ctx.path, "logpath", logpath)  # type String
    Swagger.set_header_accept(_ctx, [])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    Swagger.exec(_ctx)
end

"""


Return: Void
"""
function logFileListHandler(_api::DefaultApi; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", Void, "/logs/", [])
    Swagger.set_header_accept(_ctx, [])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update the specified PetSet
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1alpha1PetSet
"""
function patchAppsV1alpha1NamespacedPetSet(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1alpha1PetSet, "/apis/apps/v1alpha1/namespaces/{namespace}/petsets/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update status of the specified PetSet
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1alpha1PetSet
"""
function patchAppsV1alpha1NamespacedPetSetStatus(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1alpha1PetSet, "/apis/apps/v1alpha1/namespaces/{namespace}/petsets/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update the specified HorizontalPodAutoscaler
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1HorizontalPodAutoscaler
"""
function patchAutoscalingV1NamespacedHorizontalPodAutoscaler(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1HorizontalPodAutoscaler, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update status of the specified HorizontalPodAutoscaler
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1HorizontalPodAutoscaler
"""
function patchAutoscalingV1NamespacedHorizontalPodAutoscalerStatus(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1HorizontalPodAutoscaler, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update the specified Job
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1Job
"""
function patchBatchV1NamespacedJob(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1Job, "/apis/batch/v1/namespaces/{namespace}/jobs/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update status of the specified Job
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1Job
"""
function patchBatchV1NamespacedJobStatus(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1Job, "/apis/batch/v1/namespaces/{namespace}/jobs/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update the specified CertificateSigningRequest
Param: name::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1alpha1CertificateSigningRequest
"""
function patchCertificatesV1alpha1CertificateSigningRequest(_api::DefaultApi, name::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1alpha1CertificateSigningRequest, "/apis/certificates.k8s.io/v1alpha1/certificatesigningrequests/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update the specified Namespace
Param: name::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1Namespace
"""
function patchCoreV1Namespace(_api::DefaultApi, name::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1Namespace, "/api/v1/namespaces/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update status of the specified Namespace
Param: name::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1Namespace
"""
function patchCoreV1NamespaceStatus(_api::DefaultApi, name::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1Namespace, "/api/v1/namespaces/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update the specified ConfigMap
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1ConfigMap
"""
function patchCoreV1NamespacedConfigMap(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1ConfigMap, "/api/v1/namespaces/{namespace}/configmaps/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update the specified Endpoints
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1Endpoints
"""
function patchCoreV1NamespacedEndpoints(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1Endpoints, "/api/v1/namespaces/{namespace}/endpoints/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update the specified Event
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1Event
"""
function patchCoreV1NamespacedEvent(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1Event, "/api/v1/namespaces/{namespace}/events/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update the specified LimitRange
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1LimitRange
"""
function patchCoreV1NamespacedLimitRange(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1LimitRange, "/api/v1/namespaces/{namespace}/limitranges/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update the specified PersistentVolumeClaim
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1PersistentVolumeClaim
"""
function patchCoreV1NamespacedPersistentVolumeClaim(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1PersistentVolumeClaim, "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update status of the specified PersistentVolumeClaim
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1PersistentVolumeClaim
"""
function patchCoreV1NamespacedPersistentVolumeClaimStatus(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1PersistentVolumeClaim, "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update the specified Pod
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1Pod
"""
function patchCoreV1NamespacedPod(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1Pod, "/api/v1/namespaces/{namespace}/pods/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update status of the specified Pod
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1Pod
"""
function patchCoreV1NamespacedPodStatus(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1Pod, "/api/v1/namespaces/{namespace}/pods/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update the specified PodTemplate
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1PodTemplate
"""
function patchCoreV1NamespacedPodTemplate(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1PodTemplate, "/api/v1/namespaces/{namespace}/podtemplates/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update the specified ReplicationController
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1ReplicationController
"""
function patchCoreV1NamespacedReplicationController(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1ReplicationController, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update status of the specified ReplicationController
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1ReplicationController
"""
function patchCoreV1NamespacedReplicationControllerStatus(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1ReplicationController, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update the specified ResourceQuota
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1ResourceQuota
"""
function patchCoreV1NamespacedResourceQuota(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1ResourceQuota, "/api/v1/namespaces/{namespace}/resourcequotas/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update status of the specified ResourceQuota
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1ResourceQuota
"""
function patchCoreV1NamespacedResourceQuotaStatus(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1ResourceQuota, "/api/v1/namespaces/{namespace}/resourcequotas/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update scale of the specified Scale
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1Scale
"""
function patchCoreV1NamespacedScaleScale(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1Scale, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update the specified Secret
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1Secret
"""
function patchCoreV1NamespacedSecret(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1Secret, "/api/v1/namespaces/{namespace}/secrets/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update the specified Service
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1Service
"""
function patchCoreV1NamespacedService(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1Service, "/api/v1/namespaces/{namespace}/services/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update the specified ServiceAccount
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1ServiceAccount
"""
function patchCoreV1NamespacedServiceAccount(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1ServiceAccount, "/api/v1/namespaces/{namespace}/serviceaccounts/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update status of the specified Service
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1Service
"""
function patchCoreV1NamespacedServiceStatus(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1Service, "/api/v1/namespaces/{namespace}/services/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update the specified Node
Param: name::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1Node
"""
function patchCoreV1Node(_api::DefaultApi, name::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1Node, "/api/v1/nodes/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update status of the specified Node
Param: name::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1Node
"""
function patchCoreV1NodeStatus(_api::DefaultApi, name::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1Node, "/api/v1/nodes/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update the specified PersistentVolume
Param: name::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1PersistentVolume
"""
function patchCoreV1PersistentVolume(_api::DefaultApi, name::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1PersistentVolume, "/api/v1/persistentvolumes/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update status of the specified PersistentVolume
Param: name::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1PersistentVolume
"""
function patchCoreV1PersistentVolumeStatus(_api::DefaultApi, name::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1PersistentVolume, "/api/v1/persistentvolumes/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update the specified DaemonSet
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1beta1DaemonSet
"""
function patchExtensionsV1beta1NamespacedDaemonSet(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1beta1DaemonSet, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update status of the specified DaemonSet
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1beta1DaemonSet
"""
function patchExtensionsV1beta1NamespacedDaemonSetStatus(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1beta1DaemonSet, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update the specified Deployment
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1beta1Deployment
"""
function patchExtensionsV1beta1NamespacedDeployment(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1beta1Deployment, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update status of the specified Deployment
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1beta1Deployment
"""
function patchExtensionsV1beta1NamespacedDeploymentStatus(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1beta1Deployment, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update scale of the specified Scale
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1beta1Scale
"""
function patchExtensionsV1beta1NamespacedDeploymentsScale(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1beta1Scale, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update the specified HorizontalPodAutoscaler
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1beta1HorizontalPodAutoscaler
"""
function patchExtensionsV1beta1NamespacedHorizontalPodAutoscaler(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1beta1HorizontalPodAutoscaler, "/apis/extensions/v1beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update status of the specified HorizontalPodAutoscaler
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1beta1HorizontalPodAutoscaler
"""
function patchExtensionsV1beta1NamespacedHorizontalPodAutoscalerStatus(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1beta1HorizontalPodAutoscaler, "/apis/extensions/v1beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update the specified Ingress
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1beta1Ingress
"""
function patchExtensionsV1beta1NamespacedIngress(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1beta1Ingress, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update status of the specified Ingress
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1beta1Ingress
"""
function patchExtensionsV1beta1NamespacedIngressStatus(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1beta1Ingress, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update the specified Job
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1beta1Job
"""
function patchExtensionsV1beta1NamespacedJob(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1beta1Job, "/apis/extensions/v1beta1/namespaces/{namespace}/jobs/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update status of the specified Job
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1beta1Job
"""
function patchExtensionsV1beta1NamespacedJobStatus(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1beta1Job, "/apis/extensions/v1beta1/namespaces/{namespace}/jobs/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update the specified NetworkPolicy
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1beta1NetworkPolicy
"""
function patchExtensionsV1beta1NamespacedNetworkPolicy(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1beta1NetworkPolicy, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update the specified ReplicaSet
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1beta1ReplicaSet
"""
function patchExtensionsV1beta1NamespacedReplicaSet(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1beta1ReplicaSet, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update status of the specified ReplicaSet
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1beta1ReplicaSet
"""
function patchExtensionsV1beta1NamespacedReplicaSetStatus(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1beta1ReplicaSet, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update scale of the specified Scale
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1beta1Scale
"""
function patchExtensionsV1beta1NamespacedReplicasetsScale(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1beta1Scale, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update scale of the specified Scale
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1beta1Scale
"""
function patchExtensionsV1beta1NamespacedReplicationcontrollersScale(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1beta1Scale, "/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update the specified ThirdPartyResource
Param: name::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1beta1ThirdPartyResource
"""
function patchExtensionsV1beta1ThirdPartyResource(_api::DefaultApi, name::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1beta1ThirdPartyResource, "/apis/extensions/v1beta1/thirdpartyresources/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update the specified PodDisruptionBudget
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1alpha1PodDisruptionBudget
"""
function patchPolicyV1alpha1NamespacedPodDisruptionBudget(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1alpha1PodDisruptionBudget, "/apis/policy/v1alpha1/namespaces/{namespace}/poddisruptionbudgets/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update status of the specified PodDisruptionBudget
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1alpha1PodDisruptionBudget
"""
function patchPolicyV1alpha1NamespacedPodDisruptionBudgetStatus(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1alpha1PodDisruptionBudget, "/apis/policy/v1alpha1/namespaces/{namespace}/poddisruptionbudgets/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update the specified ClusterRole
Param: name::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1alpha1ClusterRole
"""
function patchRbacAuthorizationV1alpha1ClusterRole(_api::DefaultApi, name::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1alpha1ClusterRole, "/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update the specified ClusterRoleBinding
Param: name::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1alpha1ClusterRoleBinding
"""
function patchRbacAuthorizationV1alpha1ClusterRoleBinding(_api::DefaultApi, name::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1alpha1ClusterRoleBinding, "/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update the specified Role
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1alpha1Role
"""
function patchRbacAuthorizationV1alpha1NamespacedRole(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1alpha1Role, "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update the specified RoleBinding
Param: name::String (required)
Param: namespace::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1alpha1RoleBinding
"""
function patchRbacAuthorizationV1alpha1NamespacedRoleBinding(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1alpha1RoleBinding, "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

partially update the specified StorageClass
Param: name::String (required)
Param: body::UnversionedPatch (required)
Param: pretty::String
Return: V1beta1StorageClass
"""
function patchStorageV1beta1StorageClass(_api::DefaultApi, name::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", V1beta1StorageClass, "/apis/storage.k8s.io/v1beta1/storageclasses/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy DELETE requests to Pod
Param: name::String (required)
Param: namespace::String (required)
Return: String
"""
function proxyCoreV1DELETENamespacedPod(_api::DefaultApi, name::String, namespace::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", String, "/api/v1/proxy/namespaces/{namespace}/pods/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy DELETE requests to Pod
Param: name::String (required)
Param: namespace::String (required)
Param: path::String (required)
Return: String
"""
function proxyCoreV1DELETENamespacedPodWithPath(_api::DefaultApi, name::String, namespace::String, path::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", String, "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy DELETE requests to Service
Param: name::String (required)
Param: namespace::String (required)
Return: String
"""
function proxyCoreV1DELETENamespacedService(_api::DefaultApi, name::String, namespace::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", String, "/api/v1/proxy/namespaces/{namespace}/services/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy DELETE requests to Service
Param: name::String (required)
Param: namespace::String (required)
Param: path::String (required)
Return: String
"""
function proxyCoreV1DELETENamespacedServiceWithPath(_api::DefaultApi, name::String, namespace::String, path::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", String, "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy DELETE requests to Node
Param: name::String (required)
Return: String
"""
function proxyCoreV1DELETENode(_api::DefaultApi, name::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", String, "/api/v1/proxy/nodes/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy DELETE requests to Node
Param: name::String (required)
Param: path::String (required)
Return: String
"""
function proxyCoreV1DELETENodeWithPath(_api::DefaultApi, name::String, path::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", String, "/api/v1/proxy/nodes/{name}/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy GET requests to Pod
Param: name::String (required)
Param: namespace::String (required)
Return: String
"""
function proxyCoreV1GETNamespacedPod(_api::DefaultApi, name::String, namespace::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", String, "/api/v1/proxy/namespaces/{namespace}/pods/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy GET requests to Pod
Param: name::String (required)
Param: namespace::String (required)
Param: path::String (required)
Return: String
"""
function proxyCoreV1GETNamespacedPodWithPath(_api::DefaultApi, name::String, namespace::String, path::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", String, "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy GET requests to Service
Param: name::String (required)
Param: namespace::String (required)
Return: String
"""
function proxyCoreV1GETNamespacedService(_api::DefaultApi, name::String, namespace::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", String, "/api/v1/proxy/namespaces/{namespace}/services/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy GET requests to Service
Param: name::String (required)
Param: namespace::String (required)
Param: path::String (required)
Return: String
"""
function proxyCoreV1GETNamespacedServiceWithPath(_api::DefaultApi, name::String, namespace::String, path::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", String, "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy GET requests to Node
Param: name::String (required)
Return: String
"""
function proxyCoreV1GETNode(_api::DefaultApi, name::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", String, "/api/v1/proxy/nodes/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy GET requests to Node
Param: name::String (required)
Param: path::String (required)
Return: String
"""
function proxyCoreV1GETNodeWithPath(_api::DefaultApi, name::String, path::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", String, "/api/v1/proxy/nodes/{name}/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy HEAD requests to Pod
Param: name::String (required)
Param: namespace::String (required)
Return: String
"""
function proxyCoreV1HEADNamespacedPod(_api::DefaultApi, name::String, namespace::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "HEAD", String, "/api/v1/proxy/namespaces/{namespace}/pods/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy HEAD requests to Pod
Param: name::String (required)
Param: namespace::String (required)
Param: path::String (required)
Return: String
"""
function proxyCoreV1HEADNamespacedPodWithPath(_api::DefaultApi, name::String, namespace::String, path::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "HEAD", String, "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy HEAD requests to Service
Param: name::String (required)
Param: namespace::String (required)
Return: String
"""
function proxyCoreV1HEADNamespacedService(_api::DefaultApi, name::String, namespace::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "HEAD", String, "/api/v1/proxy/namespaces/{namespace}/services/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy HEAD requests to Service
Param: name::String (required)
Param: namespace::String (required)
Param: path::String (required)
Return: String
"""
function proxyCoreV1HEADNamespacedServiceWithPath(_api::DefaultApi, name::String, namespace::String, path::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "HEAD", String, "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy HEAD requests to Node
Param: name::String (required)
Return: String
"""
function proxyCoreV1HEADNode(_api::DefaultApi, name::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "HEAD", String, "/api/v1/proxy/nodes/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy HEAD requests to Node
Param: name::String (required)
Param: path::String (required)
Return: String
"""
function proxyCoreV1HEADNodeWithPath(_api::DefaultApi, name::String, path::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "HEAD", String, "/api/v1/proxy/nodes/{name}/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy OPTIONS requests to Pod
Param: name::String (required)
Param: namespace::String (required)
Return: String
"""
function proxyCoreV1OPTIONSNamespacedPod(_api::DefaultApi, name::String, namespace::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "OPTIONS", String, "/api/v1/proxy/namespaces/{namespace}/pods/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy OPTIONS requests to Pod
Param: name::String (required)
Param: namespace::String (required)
Param: path::String (required)
Return: String
"""
function proxyCoreV1OPTIONSNamespacedPodWithPath(_api::DefaultApi, name::String, namespace::String, path::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "OPTIONS", String, "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy OPTIONS requests to Service
Param: name::String (required)
Param: namespace::String (required)
Return: String
"""
function proxyCoreV1OPTIONSNamespacedService(_api::DefaultApi, name::String, namespace::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "OPTIONS", String, "/api/v1/proxy/namespaces/{namespace}/services/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy OPTIONS requests to Service
Param: name::String (required)
Param: namespace::String (required)
Param: path::String (required)
Return: String
"""
function proxyCoreV1OPTIONSNamespacedServiceWithPath(_api::DefaultApi, name::String, namespace::String, path::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "OPTIONS", String, "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy OPTIONS requests to Node
Param: name::String (required)
Return: String
"""
function proxyCoreV1OPTIONSNode(_api::DefaultApi, name::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "OPTIONS", String, "/api/v1/proxy/nodes/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy OPTIONS requests to Node
Param: name::String (required)
Param: path::String (required)
Return: String
"""
function proxyCoreV1OPTIONSNodeWithPath(_api::DefaultApi, name::String, path::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "OPTIONS", String, "/api/v1/proxy/nodes/{name}/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy POST requests to Pod
Param: name::String (required)
Param: namespace::String (required)
Return: String
"""
function proxyCoreV1POSTNamespacedPod(_api::DefaultApi, name::String, namespace::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", String, "/api/v1/proxy/namespaces/{namespace}/pods/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy POST requests to Pod
Param: name::String (required)
Param: namespace::String (required)
Param: path::String (required)
Return: String
"""
function proxyCoreV1POSTNamespacedPodWithPath(_api::DefaultApi, name::String, namespace::String, path::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", String, "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy POST requests to Service
Param: name::String (required)
Param: namespace::String (required)
Return: String
"""
function proxyCoreV1POSTNamespacedService(_api::DefaultApi, name::String, namespace::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", String, "/api/v1/proxy/namespaces/{namespace}/services/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy POST requests to Service
Param: name::String (required)
Param: namespace::String (required)
Param: path::String (required)
Return: String
"""
function proxyCoreV1POSTNamespacedServiceWithPath(_api::DefaultApi, name::String, namespace::String, path::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", String, "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy POST requests to Node
Param: name::String (required)
Return: String
"""
function proxyCoreV1POSTNode(_api::DefaultApi, name::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", String, "/api/v1/proxy/nodes/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy POST requests to Node
Param: name::String (required)
Param: path::String (required)
Return: String
"""
function proxyCoreV1POSTNodeWithPath(_api::DefaultApi, name::String, path::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", String, "/api/v1/proxy/nodes/{name}/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy PUT requests to Pod
Param: name::String (required)
Param: namespace::String (required)
Return: String
"""
function proxyCoreV1PUTNamespacedPod(_api::DefaultApi, name::String, namespace::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", String, "/api/v1/proxy/namespaces/{namespace}/pods/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy PUT requests to Pod
Param: name::String (required)
Param: namespace::String (required)
Param: path::String (required)
Return: String
"""
function proxyCoreV1PUTNamespacedPodWithPath(_api::DefaultApi, name::String, namespace::String, path::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", String, "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy PUT requests to Service
Param: name::String (required)
Param: namespace::String (required)
Return: String
"""
function proxyCoreV1PUTNamespacedService(_api::DefaultApi, name::String, namespace::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", String, "/api/v1/proxy/namespaces/{namespace}/services/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy PUT requests to Service
Param: name::String (required)
Param: namespace::String (required)
Param: path::String (required)
Return: String
"""
function proxyCoreV1PUTNamespacedServiceWithPath(_api::DefaultApi, name::String, namespace::String, path::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", String, "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy PUT requests to Node
Param: name::String (required)
Return: String
"""
function proxyCoreV1PUTNode(_api::DefaultApi, name::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", String, "/api/v1/proxy/nodes/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

proxy PUT requests to Node
Param: name::String (required)
Param: path::String (required)
Return: String
"""
function proxyCoreV1PUTNodeWithPath(_api::DefaultApi, name::String, path::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", String, "/api/v1/proxy/nodes/{name}/{path}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_header_accept(_ctx, ["*/*"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read the specified PetSet
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Param: exact::Bool
Param: _export::Bool
Return: V1alpha1PetSet
"""
function readAppsV1alpha1NamespacedPetSet(_api::DefaultApi, name::String, namespace::String; pretty=nothing, exact=nothing, _export=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1alpha1PetSet, "/apis/apps/v1alpha1/namespaces/{namespace}/petsets/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "exact", exact)  # type Bool
    Swagger.set_param(_ctx.query, "export", _export)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read status of the specified PetSet
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Return: V1alpha1PetSet
"""
function readAppsV1alpha1NamespacedPetSetStatus(_api::DefaultApi, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1alpha1PetSet, "/apis/apps/v1alpha1/namespaces/{namespace}/petsets/{name}/status", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read the specified HorizontalPodAutoscaler
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Param: exact::Bool
Param: _export::Bool
Return: V1HorizontalPodAutoscaler
"""
function readAutoscalingV1NamespacedHorizontalPodAutoscaler(_api::DefaultApi, name::String, namespace::String; pretty=nothing, exact=nothing, _export=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1HorizontalPodAutoscaler, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "exact", exact)  # type Bool
    Swagger.set_param(_ctx.query, "export", _export)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read status of the specified HorizontalPodAutoscaler
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Return: V1HorizontalPodAutoscaler
"""
function readAutoscalingV1NamespacedHorizontalPodAutoscalerStatus(_api::DefaultApi, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1HorizontalPodAutoscaler, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read the specified Job
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Param: exact::Bool
Param: _export::Bool
Return: V1Job
"""
function readBatchV1NamespacedJob(_api::DefaultApi, name::String, namespace::String; pretty=nothing, exact=nothing, _export=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1Job, "/apis/batch/v1/namespaces/{namespace}/jobs/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "exact", exact)  # type Bool
    Swagger.set_param(_ctx.query, "export", _export)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read status of the specified Job
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Return: V1Job
"""
function readBatchV1NamespacedJobStatus(_api::DefaultApi, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1Job, "/apis/batch/v1/namespaces/{namespace}/jobs/{name}/status", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read the specified CertificateSigningRequest
Param: name::String (required)
Param: pretty::String
Param: exact::Bool
Param: _export::Bool
Return: V1alpha1CertificateSigningRequest
"""
function readCertificatesV1alpha1CertificateSigningRequest(_api::DefaultApi, name::String; pretty=nothing, exact=nothing, _export=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1alpha1CertificateSigningRequest, "/apis/certificates.k8s.io/v1alpha1/certificatesigningrequests/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "exact", exact)  # type Bool
    Swagger.set_param(_ctx.query, "export", _export)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read the specified ComponentStatus
Param: name::String (required)
Param: pretty::String
Return: V1ComponentStatus
"""
function readCoreV1ComponentStatus(_api::DefaultApi, name::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1ComponentStatus, "/api/v1/componentstatuses/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read the specified Namespace
Param: name::String (required)
Param: pretty::String
Param: exact::Bool
Param: _export::Bool
Return: V1Namespace
"""
function readCoreV1Namespace(_api::DefaultApi, name::String; pretty=nothing, exact=nothing, _export=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1Namespace, "/api/v1/namespaces/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "exact", exact)  # type Bool
    Swagger.set_param(_ctx.query, "export", _export)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read status of the specified Namespace
Param: name::String (required)
Param: pretty::String
Return: V1Namespace
"""
function readCoreV1NamespaceStatus(_api::DefaultApi, name::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1Namespace, "/api/v1/namespaces/{name}/status", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read the specified ConfigMap
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Param: exact::Bool
Param: _export::Bool
Return: V1ConfigMap
"""
function readCoreV1NamespacedConfigMap(_api::DefaultApi, name::String, namespace::String; pretty=nothing, exact=nothing, _export=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1ConfigMap, "/api/v1/namespaces/{namespace}/configmaps/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "exact", exact)  # type Bool
    Swagger.set_param(_ctx.query, "export", _export)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read the specified Endpoints
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Param: exact::Bool
Param: _export::Bool
Return: V1Endpoints
"""
function readCoreV1NamespacedEndpoints(_api::DefaultApi, name::String, namespace::String; pretty=nothing, exact=nothing, _export=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1Endpoints, "/api/v1/namespaces/{namespace}/endpoints/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "exact", exact)  # type Bool
    Swagger.set_param(_ctx.query, "export", _export)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read the specified Event
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Param: exact::Bool
Param: _export::Bool
Return: V1Event
"""
function readCoreV1NamespacedEvent(_api::DefaultApi, name::String, namespace::String; pretty=nothing, exact=nothing, _export=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1Event, "/api/v1/namespaces/{namespace}/events/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "exact", exact)  # type Bool
    Swagger.set_param(_ctx.query, "export", _export)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read the specified LimitRange
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Param: exact::Bool
Param: _export::Bool
Return: V1LimitRange
"""
function readCoreV1NamespacedLimitRange(_api::DefaultApi, name::String, namespace::String; pretty=nothing, exact=nothing, _export=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1LimitRange, "/api/v1/namespaces/{namespace}/limitranges/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "exact", exact)  # type Bool
    Swagger.set_param(_ctx.query, "export", _export)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read the specified PersistentVolumeClaim
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Param: exact::Bool
Param: _export::Bool
Return: V1PersistentVolumeClaim
"""
function readCoreV1NamespacedPersistentVolumeClaim(_api::DefaultApi, name::String, namespace::String; pretty=nothing, exact=nothing, _export=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1PersistentVolumeClaim, "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "exact", exact)  # type Bool
    Swagger.set_param(_ctx.query, "export", _export)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read status of the specified PersistentVolumeClaim
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Return: V1PersistentVolumeClaim
"""
function readCoreV1NamespacedPersistentVolumeClaimStatus(_api::DefaultApi, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1PersistentVolumeClaim, "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read the specified Pod
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Param: exact::Bool
Param: _export::Bool
Return: V1Pod
"""
function readCoreV1NamespacedPod(_api::DefaultApi, name::String, namespace::String; pretty=nothing, exact=nothing, _export=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1Pod, "/api/v1/namespaces/{namespace}/pods/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "exact", exact)  # type Bool
    Swagger.set_param(_ctx.query, "export", _export)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read log of the specified Pod
Param: name::String (required)
Param: namespace::String (required)
Param: container::String
Param: follow::Bool
Param: limitBytes::Int32
Param: pretty::String
Param: previous::Bool
Param: sinceSeconds::Int32
Param: sinceTime::String
Param: tailLines::Int32
Param: timestamps::Bool
Return: String
"""
function readCoreV1NamespacedPodLog(_api::DefaultApi, name::String, namespace::String; container=nothing, follow=nothing, limitBytes=nothing, pretty=nothing, previous=nothing, sinceSeconds=nothing, sinceTime=nothing, tailLines=nothing, timestamps=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", String, "/api/v1/namespaces/{namespace}/pods/{name}/log", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "container", container)  # type String
    Swagger.set_param(_ctx.query, "follow", follow)  # type Bool
    Swagger.set_param(_ctx.query, "limitBytes", limitBytes)  # type Int32
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "previous", previous)  # type Bool
    Swagger.set_param(_ctx.query, "sinceSeconds", sinceSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "sinceTime", sinceTime)  # type String
    Swagger.set_param(_ctx.query, "tailLines", tailLines)  # type Int32
    Swagger.set_param(_ctx.query, "timestamps", timestamps)  # type Bool
    Swagger.set_header_accept(_ctx, ["text/plain", "application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read status of the specified Pod
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Return: V1Pod
"""
function readCoreV1NamespacedPodStatus(_api::DefaultApi, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1Pod, "/api/v1/namespaces/{namespace}/pods/{name}/status", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read the specified PodTemplate
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Param: exact::Bool
Param: _export::Bool
Return: V1PodTemplate
"""
function readCoreV1NamespacedPodTemplate(_api::DefaultApi, name::String, namespace::String; pretty=nothing, exact=nothing, _export=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1PodTemplate, "/api/v1/namespaces/{namespace}/podtemplates/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "exact", exact)  # type Bool
    Swagger.set_param(_ctx.query, "export", _export)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read the specified ReplicationController
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Param: exact::Bool
Param: _export::Bool
Return: V1ReplicationController
"""
function readCoreV1NamespacedReplicationController(_api::DefaultApi, name::String, namespace::String; pretty=nothing, exact=nothing, _export=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1ReplicationController, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "exact", exact)  # type Bool
    Swagger.set_param(_ctx.query, "export", _export)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read status of the specified ReplicationController
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Return: V1ReplicationController
"""
function readCoreV1NamespacedReplicationControllerStatus(_api::DefaultApi, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1ReplicationController, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read the specified ResourceQuota
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Param: exact::Bool
Param: _export::Bool
Return: V1ResourceQuota
"""
function readCoreV1NamespacedResourceQuota(_api::DefaultApi, name::String, namespace::String; pretty=nothing, exact=nothing, _export=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1ResourceQuota, "/api/v1/namespaces/{namespace}/resourcequotas/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "exact", exact)  # type Bool
    Swagger.set_param(_ctx.query, "export", _export)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read status of the specified ResourceQuota
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Return: V1ResourceQuota
"""
function readCoreV1NamespacedResourceQuotaStatus(_api::DefaultApi, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1ResourceQuota, "/api/v1/namespaces/{namespace}/resourcequotas/{name}/status", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read scale of the specified Scale
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Return: V1Scale
"""
function readCoreV1NamespacedScaleScale(_api::DefaultApi, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1Scale, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read the specified Secret
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Param: exact::Bool
Param: _export::Bool
Return: V1Secret
"""
function readCoreV1NamespacedSecret(_api::DefaultApi, name::String, namespace::String; pretty=nothing, exact=nothing, _export=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1Secret, "/api/v1/namespaces/{namespace}/secrets/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "exact", exact)  # type Bool
    Swagger.set_param(_ctx.query, "export", _export)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read the specified Service
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Param: exact::Bool
Param: _export::Bool
Return: V1Service
"""
function readCoreV1NamespacedService(_api::DefaultApi, name::String, namespace::String; pretty=nothing, exact=nothing, _export=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1Service, "/api/v1/namespaces/{namespace}/services/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "exact", exact)  # type Bool
    Swagger.set_param(_ctx.query, "export", _export)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read the specified ServiceAccount
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Param: exact::Bool
Param: _export::Bool
Return: V1ServiceAccount
"""
function readCoreV1NamespacedServiceAccount(_api::DefaultApi, name::String, namespace::String; pretty=nothing, exact=nothing, _export=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1ServiceAccount, "/api/v1/namespaces/{namespace}/serviceaccounts/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "exact", exact)  # type Bool
    Swagger.set_param(_ctx.query, "export", _export)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read status of the specified Service
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Return: V1Service
"""
function readCoreV1NamespacedServiceStatus(_api::DefaultApi, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1Service, "/api/v1/namespaces/{namespace}/services/{name}/status", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read the specified Node
Param: name::String (required)
Param: pretty::String
Param: exact::Bool
Param: _export::Bool
Return: V1Node
"""
function readCoreV1Node(_api::DefaultApi, name::String; pretty=nothing, exact=nothing, _export=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1Node, "/api/v1/nodes/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "exact", exact)  # type Bool
    Swagger.set_param(_ctx.query, "export", _export)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read status of the specified Node
Param: name::String (required)
Param: pretty::String
Return: V1Node
"""
function readCoreV1NodeStatus(_api::DefaultApi, name::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1Node, "/api/v1/nodes/{name}/status", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read the specified PersistentVolume
Param: name::String (required)
Param: pretty::String
Param: exact::Bool
Param: _export::Bool
Return: V1PersistentVolume
"""
function readCoreV1PersistentVolume(_api::DefaultApi, name::String; pretty=nothing, exact=nothing, _export=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1PersistentVolume, "/api/v1/persistentvolumes/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "exact", exact)  # type Bool
    Swagger.set_param(_ctx.query, "export", _export)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read status of the specified PersistentVolume
Param: name::String (required)
Param: pretty::String
Return: V1PersistentVolume
"""
function readCoreV1PersistentVolumeStatus(_api::DefaultApi, name::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1PersistentVolume, "/api/v1/persistentvolumes/{name}/status", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read the specified DaemonSet
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Param: exact::Bool
Param: _export::Bool
Return: V1beta1DaemonSet
"""
function readExtensionsV1beta1NamespacedDaemonSet(_api::DefaultApi, name::String, namespace::String; pretty=nothing, exact=nothing, _export=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1beta1DaemonSet, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "exact", exact)  # type Bool
    Swagger.set_param(_ctx.query, "export", _export)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read status of the specified DaemonSet
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Return: V1beta1DaemonSet
"""
function readExtensionsV1beta1NamespacedDaemonSetStatus(_api::DefaultApi, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1beta1DaemonSet, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read the specified Deployment
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Param: exact::Bool
Param: _export::Bool
Return: V1beta1Deployment
"""
function readExtensionsV1beta1NamespacedDeployment(_api::DefaultApi, name::String, namespace::String; pretty=nothing, exact=nothing, _export=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1beta1Deployment, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "exact", exact)  # type Bool
    Swagger.set_param(_ctx.query, "export", _export)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read status of the specified Deployment
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Return: V1beta1Deployment
"""
function readExtensionsV1beta1NamespacedDeploymentStatus(_api::DefaultApi, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1beta1Deployment, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read scale of the specified Scale
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Return: V1beta1Scale
"""
function readExtensionsV1beta1NamespacedDeploymentsScale(_api::DefaultApi, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1beta1Scale, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read the specified HorizontalPodAutoscaler
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Param: exact::Bool
Param: _export::Bool
Return: V1beta1HorizontalPodAutoscaler
"""
function readExtensionsV1beta1NamespacedHorizontalPodAutoscaler(_api::DefaultApi, name::String, namespace::String; pretty=nothing, exact=nothing, _export=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1beta1HorizontalPodAutoscaler, "/apis/extensions/v1beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "exact", exact)  # type Bool
    Swagger.set_param(_ctx.query, "export", _export)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read status of the specified HorizontalPodAutoscaler
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Return: V1beta1HorizontalPodAutoscaler
"""
function readExtensionsV1beta1NamespacedHorizontalPodAutoscalerStatus(_api::DefaultApi, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1beta1HorizontalPodAutoscaler, "/apis/extensions/v1beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read the specified Ingress
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Param: exact::Bool
Param: _export::Bool
Return: V1beta1Ingress
"""
function readExtensionsV1beta1NamespacedIngress(_api::DefaultApi, name::String, namespace::String; pretty=nothing, exact=nothing, _export=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1beta1Ingress, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "exact", exact)  # type Bool
    Swagger.set_param(_ctx.query, "export", _export)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read status of the specified Ingress
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Return: V1beta1Ingress
"""
function readExtensionsV1beta1NamespacedIngressStatus(_api::DefaultApi, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1beta1Ingress, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read the specified Job
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Param: exact::Bool
Param: _export::Bool
Return: V1beta1Job
"""
function readExtensionsV1beta1NamespacedJob(_api::DefaultApi, name::String, namespace::String; pretty=nothing, exact=nothing, _export=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1beta1Job, "/apis/extensions/v1beta1/namespaces/{namespace}/jobs/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "exact", exact)  # type Bool
    Swagger.set_param(_ctx.query, "export", _export)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read status of the specified Job
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Return: V1beta1Job
"""
function readExtensionsV1beta1NamespacedJobStatus(_api::DefaultApi, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1beta1Job, "/apis/extensions/v1beta1/namespaces/{namespace}/jobs/{name}/status", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read the specified NetworkPolicy
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Param: exact::Bool
Param: _export::Bool
Return: V1beta1NetworkPolicy
"""
function readExtensionsV1beta1NamespacedNetworkPolicy(_api::DefaultApi, name::String, namespace::String; pretty=nothing, exact=nothing, _export=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1beta1NetworkPolicy, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "exact", exact)  # type Bool
    Swagger.set_param(_ctx.query, "export", _export)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read the specified ReplicaSet
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Param: exact::Bool
Param: _export::Bool
Return: V1beta1ReplicaSet
"""
function readExtensionsV1beta1NamespacedReplicaSet(_api::DefaultApi, name::String, namespace::String; pretty=nothing, exact=nothing, _export=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1beta1ReplicaSet, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "exact", exact)  # type Bool
    Swagger.set_param(_ctx.query, "export", _export)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read status of the specified ReplicaSet
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Return: V1beta1ReplicaSet
"""
function readExtensionsV1beta1NamespacedReplicaSetStatus(_api::DefaultApi, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1beta1ReplicaSet, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read scale of the specified Scale
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Return: V1beta1Scale
"""
function readExtensionsV1beta1NamespacedReplicasetsScale(_api::DefaultApi, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1beta1Scale, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read scale of the specified Scale
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Return: V1beta1Scale
"""
function readExtensionsV1beta1NamespacedReplicationcontrollersScale(_api::DefaultApi, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1beta1Scale, "/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read the specified ThirdPartyResource
Param: name::String (required)
Param: pretty::String
Param: exact::Bool
Param: _export::Bool
Return: V1beta1ThirdPartyResource
"""
function readExtensionsV1beta1ThirdPartyResource(_api::DefaultApi, name::String; pretty=nothing, exact=nothing, _export=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1beta1ThirdPartyResource, "/apis/extensions/v1beta1/thirdpartyresources/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "exact", exact)  # type Bool
    Swagger.set_param(_ctx.query, "export", _export)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read the specified PodDisruptionBudget
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Param: exact::Bool
Param: _export::Bool
Return: V1alpha1PodDisruptionBudget
"""
function readPolicyV1alpha1NamespacedPodDisruptionBudget(_api::DefaultApi, name::String, namespace::String; pretty=nothing, exact=nothing, _export=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1alpha1PodDisruptionBudget, "/apis/policy/v1alpha1/namespaces/{namespace}/poddisruptionbudgets/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "exact", exact)  # type Bool
    Swagger.set_param(_ctx.query, "export", _export)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read status of the specified PodDisruptionBudget
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Return: V1alpha1PodDisruptionBudget
"""
function readPolicyV1alpha1NamespacedPodDisruptionBudgetStatus(_api::DefaultApi, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1alpha1PodDisruptionBudget, "/apis/policy/v1alpha1/namespaces/{namespace}/poddisruptionbudgets/{name}/status", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read the specified ClusterRole
Param: name::String (required)
Param: pretty::String
Return: V1alpha1ClusterRole
"""
function readRbacAuthorizationV1alpha1ClusterRole(_api::DefaultApi, name::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1alpha1ClusterRole, "/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read the specified ClusterRoleBinding
Param: name::String (required)
Param: pretty::String
Return: V1alpha1ClusterRoleBinding
"""
function readRbacAuthorizationV1alpha1ClusterRoleBinding(_api::DefaultApi, name::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1alpha1ClusterRoleBinding, "/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read the specified Role
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Return: V1alpha1Role
"""
function readRbacAuthorizationV1alpha1NamespacedRole(_api::DefaultApi, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1alpha1Role, "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read the specified RoleBinding
Param: name::String (required)
Param: namespace::String (required)
Param: pretty::String
Return: V1alpha1RoleBinding
"""
function readRbacAuthorizationV1alpha1NamespacedRoleBinding(_api::DefaultApi, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1alpha1RoleBinding, "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

read the specified StorageClass
Param: name::String (required)
Param: pretty::String
Param: exact::Bool
Param: _export::Bool
Return: V1beta1StorageClass
"""
function readStorageV1beta1StorageClass(_api::DefaultApi, name::String; pretty=nothing, exact=nothing, _export=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", V1beta1StorageClass, "/apis/storage.k8s.io/v1beta1/storageclasses/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "exact", exact)  # type Bool
    Swagger.set_param(_ctx.query, "export", _export)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace the specified PetSet
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1alpha1PetSet (required)
Param: pretty::String
Return: V1alpha1PetSet
"""
function replaceAppsV1alpha1NamespacedPetSet(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1alpha1PetSet, "/apis/apps/v1alpha1/namespaces/{namespace}/petsets/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace status of the specified PetSet
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1alpha1PetSet (required)
Param: pretty::String
Return: V1alpha1PetSet
"""
function replaceAppsV1alpha1NamespacedPetSetStatus(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1alpha1PetSet, "/apis/apps/v1alpha1/namespaces/{namespace}/petsets/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace the specified HorizontalPodAutoscaler
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1HorizontalPodAutoscaler (required)
Param: pretty::String
Return: V1HorizontalPodAutoscaler
"""
function replaceAutoscalingV1NamespacedHorizontalPodAutoscaler(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1HorizontalPodAutoscaler, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace status of the specified HorizontalPodAutoscaler
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1HorizontalPodAutoscaler (required)
Param: pretty::String
Return: V1HorizontalPodAutoscaler
"""
function replaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatus(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1HorizontalPodAutoscaler, "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace the specified Job
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1Job (required)
Param: pretty::String
Return: V1Job
"""
function replaceBatchV1NamespacedJob(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1Job, "/apis/batch/v1/namespaces/{namespace}/jobs/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace status of the specified Job
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1Job (required)
Param: pretty::String
Return: V1Job
"""
function replaceBatchV1NamespacedJobStatus(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1Job, "/apis/batch/v1/namespaces/{namespace}/jobs/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace the specified CertificateSigningRequest
Param: name::String (required)
Param: body::V1alpha1CertificateSigningRequest (required)
Param: pretty::String
Return: V1alpha1CertificateSigningRequest
"""
function replaceCertificatesV1alpha1CertificateSigningRequest(_api::DefaultApi, name::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1alpha1CertificateSigningRequest, "/apis/certificates.k8s.io/v1alpha1/certificatesigningrequests/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace approval of the specified CertificateSigningRequest
Param: body::V1alpha1CertificateSigningRequest (required)
Param: name::String (required)
Param: pretty::String
Return: V1alpha1CertificateSigningRequest
"""
function replaceCertificatesV1alpha1CertificateSigningRequestApproval(_api::DefaultApi, body, name::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1alpha1CertificateSigningRequest, "/apis/certificates.k8s.io/v1alpha1/certificatesigningrequests/{name}/approval", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace status of the specified CertificateSigningRequest
Param: body::V1alpha1CertificateSigningRequest (required)
Param: name::String (required)
Param: pretty::String
Return: V1alpha1CertificateSigningRequest
"""
function replaceCertificatesV1alpha1CertificateSigningRequestStatus(_api::DefaultApi, body, name::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1alpha1CertificateSigningRequest, "/apis/certificates.k8s.io/v1alpha1/certificatesigningrequests/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace the specified Namespace
Param: name::String (required)
Param: body::V1Namespace (required)
Param: pretty::String
Return: V1Namespace
"""
function replaceCoreV1Namespace(_api::DefaultApi, name::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1Namespace, "/api/v1/namespaces/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace finalize of the specified Namespace
Param: body::V1Namespace (required)
Param: name::String (required)
Param: pretty::String
Return: V1Namespace
"""
function replaceCoreV1NamespaceFinalize(_api::DefaultApi, body, name::String; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1Namespace, "/api/v1/namespaces/{name}/finalize", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace status of the specified Namespace
Param: name::String (required)
Param: body::V1Namespace (required)
Param: pretty::String
Return: V1Namespace
"""
function replaceCoreV1NamespaceStatus(_api::DefaultApi, name::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1Namespace, "/api/v1/namespaces/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace the specified ConfigMap
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1ConfigMap (required)
Param: pretty::String
Return: V1ConfigMap
"""
function replaceCoreV1NamespacedConfigMap(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1ConfigMap, "/api/v1/namespaces/{namespace}/configmaps/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace the specified Endpoints
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1Endpoints (required)
Param: pretty::String
Return: V1Endpoints
"""
function replaceCoreV1NamespacedEndpoints(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1Endpoints, "/api/v1/namespaces/{namespace}/endpoints/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace the specified Event
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1Event (required)
Param: pretty::String
Return: V1Event
"""
function replaceCoreV1NamespacedEvent(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1Event, "/api/v1/namespaces/{namespace}/events/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace the specified LimitRange
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1LimitRange (required)
Param: pretty::String
Return: V1LimitRange
"""
function replaceCoreV1NamespacedLimitRange(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1LimitRange, "/api/v1/namespaces/{namespace}/limitranges/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace the specified PersistentVolumeClaim
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1PersistentVolumeClaim (required)
Param: pretty::String
Return: V1PersistentVolumeClaim
"""
function replaceCoreV1NamespacedPersistentVolumeClaim(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1PersistentVolumeClaim, "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace status of the specified PersistentVolumeClaim
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1PersistentVolumeClaim (required)
Param: pretty::String
Return: V1PersistentVolumeClaim
"""
function replaceCoreV1NamespacedPersistentVolumeClaimStatus(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1PersistentVolumeClaim, "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace the specified Pod
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1Pod (required)
Param: pretty::String
Return: V1Pod
"""
function replaceCoreV1NamespacedPod(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1Pod, "/api/v1/namespaces/{namespace}/pods/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace status of the specified Pod
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1Pod (required)
Param: pretty::String
Return: V1Pod
"""
function replaceCoreV1NamespacedPodStatus(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1Pod, "/api/v1/namespaces/{namespace}/pods/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace the specified PodTemplate
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1PodTemplate (required)
Param: pretty::String
Return: V1PodTemplate
"""
function replaceCoreV1NamespacedPodTemplate(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1PodTemplate, "/api/v1/namespaces/{namespace}/podtemplates/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace the specified ReplicationController
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1ReplicationController (required)
Param: pretty::String
Return: V1ReplicationController
"""
function replaceCoreV1NamespacedReplicationController(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1ReplicationController, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace status of the specified ReplicationController
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1ReplicationController (required)
Param: pretty::String
Return: V1ReplicationController
"""
function replaceCoreV1NamespacedReplicationControllerStatus(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1ReplicationController, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace the specified ResourceQuota
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1ResourceQuota (required)
Param: pretty::String
Return: V1ResourceQuota
"""
function replaceCoreV1NamespacedResourceQuota(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1ResourceQuota, "/api/v1/namespaces/{namespace}/resourcequotas/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace status of the specified ResourceQuota
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1ResourceQuota (required)
Param: pretty::String
Return: V1ResourceQuota
"""
function replaceCoreV1NamespacedResourceQuotaStatus(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1ResourceQuota, "/api/v1/namespaces/{namespace}/resourcequotas/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace scale of the specified Scale
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1Scale (required)
Param: pretty::String
Return: V1Scale
"""
function replaceCoreV1NamespacedScaleScale(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1Scale, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace the specified Secret
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1Secret (required)
Param: pretty::String
Return: V1Secret
"""
function replaceCoreV1NamespacedSecret(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1Secret, "/api/v1/namespaces/{namespace}/secrets/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace the specified Service
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1Service (required)
Param: pretty::String
Return: V1Service
"""
function replaceCoreV1NamespacedService(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1Service, "/api/v1/namespaces/{namespace}/services/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace the specified ServiceAccount
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1ServiceAccount (required)
Param: pretty::String
Return: V1ServiceAccount
"""
function replaceCoreV1NamespacedServiceAccount(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1ServiceAccount, "/api/v1/namespaces/{namespace}/serviceaccounts/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace status of the specified Service
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1Service (required)
Param: pretty::String
Return: V1Service
"""
function replaceCoreV1NamespacedServiceStatus(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1Service, "/api/v1/namespaces/{namespace}/services/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace the specified Node
Param: name::String (required)
Param: body::V1Node (required)
Param: pretty::String
Return: V1Node
"""
function replaceCoreV1Node(_api::DefaultApi, name::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1Node, "/api/v1/nodes/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace status of the specified Node
Param: name::String (required)
Param: body::V1Node (required)
Param: pretty::String
Return: V1Node
"""
function replaceCoreV1NodeStatus(_api::DefaultApi, name::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1Node, "/api/v1/nodes/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace the specified PersistentVolume
Param: name::String (required)
Param: body::V1PersistentVolume (required)
Param: pretty::String
Return: V1PersistentVolume
"""
function replaceCoreV1PersistentVolume(_api::DefaultApi, name::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1PersistentVolume, "/api/v1/persistentvolumes/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace status of the specified PersistentVolume
Param: name::String (required)
Param: body::V1PersistentVolume (required)
Param: pretty::String
Return: V1PersistentVolume
"""
function replaceCoreV1PersistentVolumeStatus(_api::DefaultApi, name::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1PersistentVolume, "/api/v1/persistentvolumes/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace the specified DaemonSet
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1beta1DaemonSet (required)
Param: pretty::String
Return: V1beta1DaemonSet
"""
function replaceExtensionsV1beta1NamespacedDaemonSet(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1beta1DaemonSet, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace status of the specified DaemonSet
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1beta1DaemonSet (required)
Param: pretty::String
Return: V1beta1DaemonSet
"""
function replaceExtensionsV1beta1NamespacedDaemonSetStatus(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1beta1DaemonSet, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace the specified Deployment
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1beta1Deployment (required)
Param: pretty::String
Return: V1beta1Deployment
"""
function replaceExtensionsV1beta1NamespacedDeployment(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1beta1Deployment, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace status of the specified Deployment
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1beta1Deployment (required)
Param: pretty::String
Return: V1beta1Deployment
"""
function replaceExtensionsV1beta1NamespacedDeploymentStatus(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1beta1Deployment, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace scale of the specified Scale
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1beta1Scale (required)
Param: pretty::String
Return: V1beta1Scale
"""
function replaceExtensionsV1beta1NamespacedDeploymentsScale(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1beta1Scale, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace the specified HorizontalPodAutoscaler
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1beta1HorizontalPodAutoscaler (required)
Param: pretty::String
Return: V1beta1HorizontalPodAutoscaler
"""
function replaceExtensionsV1beta1NamespacedHorizontalPodAutoscaler(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1beta1HorizontalPodAutoscaler, "/apis/extensions/v1beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace status of the specified HorizontalPodAutoscaler
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1beta1HorizontalPodAutoscaler (required)
Param: pretty::String
Return: V1beta1HorizontalPodAutoscaler
"""
function replaceExtensionsV1beta1NamespacedHorizontalPodAutoscalerStatus(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1beta1HorizontalPodAutoscaler, "/apis/extensions/v1beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace the specified Ingress
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1beta1Ingress (required)
Param: pretty::String
Return: V1beta1Ingress
"""
function replaceExtensionsV1beta1NamespacedIngress(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1beta1Ingress, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace status of the specified Ingress
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1beta1Ingress (required)
Param: pretty::String
Return: V1beta1Ingress
"""
function replaceExtensionsV1beta1NamespacedIngressStatus(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1beta1Ingress, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace the specified Job
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1beta1Job (required)
Param: pretty::String
Return: V1beta1Job
"""
function replaceExtensionsV1beta1NamespacedJob(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1beta1Job, "/apis/extensions/v1beta1/namespaces/{namespace}/jobs/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace status of the specified Job
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1beta1Job (required)
Param: pretty::String
Return: V1beta1Job
"""
function replaceExtensionsV1beta1NamespacedJobStatus(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1beta1Job, "/apis/extensions/v1beta1/namespaces/{namespace}/jobs/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace the specified NetworkPolicy
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1beta1NetworkPolicy (required)
Param: pretty::String
Return: V1beta1NetworkPolicy
"""
function replaceExtensionsV1beta1NamespacedNetworkPolicy(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1beta1NetworkPolicy, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace the specified ReplicaSet
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1beta1ReplicaSet (required)
Param: pretty::String
Return: V1beta1ReplicaSet
"""
function replaceExtensionsV1beta1NamespacedReplicaSet(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1beta1ReplicaSet, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace status of the specified ReplicaSet
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1beta1ReplicaSet (required)
Param: pretty::String
Return: V1beta1ReplicaSet
"""
function replaceExtensionsV1beta1NamespacedReplicaSetStatus(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1beta1ReplicaSet, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace scale of the specified Scale
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1beta1Scale (required)
Param: pretty::String
Return: V1beta1Scale
"""
function replaceExtensionsV1beta1NamespacedReplicasetsScale(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1beta1Scale, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace scale of the specified Scale
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1beta1Scale (required)
Param: pretty::String
Return: V1beta1Scale
"""
function replaceExtensionsV1beta1NamespacedReplicationcontrollersScale(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1beta1Scale, "/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace the specified ThirdPartyResource
Param: name::String (required)
Param: body::V1beta1ThirdPartyResource (required)
Param: pretty::String
Return: V1beta1ThirdPartyResource
"""
function replaceExtensionsV1beta1ThirdPartyResource(_api::DefaultApi, name::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1beta1ThirdPartyResource, "/apis/extensions/v1beta1/thirdpartyresources/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace the specified PodDisruptionBudget
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1alpha1PodDisruptionBudget (required)
Param: pretty::String
Return: V1alpha1PodDisruptionBudget
"""
function replacePolicyV1alpha1NamespacedPodDisruptionBudget(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1alpha1PodDisruptionBudget, "/apis/policy/v1alpha1/namespaces/{namespace}/poddisruptionbudgets/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace status of the specified PodDisruptionBudget
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1alpha1PodDisruptionBudget (required)
Param: pretty::String
Return: V1alpha1PodDisruptionBudget
"""
function replacePolicyV1alpha1NamespacedPodDisruptionBudgetStatus(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1alpha1PodDisruptionBudget, "/apis/policy/v1alpha1/namespaces/{namespace}/poddisruptionbudgets/{name}/status", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace the specified ClusterRole
Param: name::String (required)
Param: body::V1alpha1ClusterRole (required)
Param: pretty::String
Return: V1alpha1ClusterRole
"""
function replaceRbacAuthorizationV1alpha1ClusterRole(_api::DefaultApi, name::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1alpha1ClusterRole, "/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace the specified ClusterRoleBinding
Param: name::String (required)
Param: body::V1alpha1ClusterRoleBinding (required)
Param: pretty::String
Return: V1alpha1ClusterRoleBinding
"""
function replaceRbacAuthorizationV1alpha1ClusterRoleBinding(_api::DefaultApi, name::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1alpha1ClusterRoleBinding, "/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace the specified Role
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1alpha1Role (required)
Param: pretty::String
Return: V1alpha1Role
"""
function replaceRbacAuthorizationV1alpha1NamespacedRole(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1alpha1Role, "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace the specified RoleBinding
Param: name::String (required)
Param: namespace::String (required)
Param: body::V1alpha1RoleBinding (required)
Param: pretty::String
Return: V1alpha1RoleBinding
"""
function replaceRbacAuthorizationV1alpha1NamespacedRoleBinding(_api::DefaultApi, name::String, namespace::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1alpha1RoleBinding, "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

replace the specified StorageClass
Param: name::String (required)
Param: body::V1beta1StorageClass (required)
Param: pretty::String
Return: V1beta1StorageClass
"""
function replaceStorageV1beta1StorageClass(_api::DefaultApi, name::String, body; pretty=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", V1beta1StorageClass, "/apis/storage.k8s.io/v1beta1/storageclasses/{name}", [], body)
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch changes to an object of kind PetSet
Param: name::String (required)
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchAppsV1alpha1NamespacedPetSet(_api::DefaultApi, name::String, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/apps/v1alpha1/watch/namespaces/{namespace}/petsets/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of PetSet
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchAppsV1alpha1NamespacedPetSetList(_api::DefaultApi, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/apps/v1alpha1/watch/namespaces/{namespace}/petsets", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of PetSet
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchAppsV1alpha1PetSetListForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/apps/v1alpha1/watch/petsets", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of HorizontalPodAutoscaler
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/autoscaling/v1/watch/horizontalpodautoscalers", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch changes to an object of kind HorizontalPodAutoscaler
Param: name::String (required)
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchAutoscalingV1NamespacedHorizontalPodAutoscaler(_api::DefaultApi, name::String, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/autoscaling/v1/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of HorizontalPodAutoscaler
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchAutoscalingV1NamespacedHorizontalPodAutoscalerList(_api::DefaultApi, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/autoscaling/v1/watch/namespaces/{namespace}/horizontalpodautoscalers", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of Job
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchBatchV1JobListForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/batch/v1/watch/jobs", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch changes to an object of kind Job
Param: name::String (required)
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchBatchV1NamespacedJob(_api::DefaultApi, name::String, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/batch/v1/watch/namespaces/{namespace}/jobs/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of Job
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchBatchV1NamespacedJobList(_api::DefaultApi, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/batch/v1/watch/namespaces/{namespace}/jobs", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch changes to an object of kind CertificateSigningRequest
Param: name::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCertificatesV1alpha1CertificateSigningRequest(_api::DefaultApi, name::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/certificates.k8s.io/v1alpha1/watch/certificatesigningrequests/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of CertificateSigningRequest
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCertificatesV1alpha1CertificateSigningRequestList(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/certificates.k8s.io/v1alpha1/watch/certificatesigningrequests", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of ConfigMap
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1ConfigMapListForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/configmaps", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of Endpoints
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1EndpointsListForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/endpoints", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of Event
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1EventListForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/events", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of LimitRange
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1LimitRangeListForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/limitranges", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch changes to an object of kind Namespace
Param: name::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1Namespace(_api::DefaultApi, name::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/namespaces/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of Namespace
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1NamespaceList(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/namespaces", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch changes to an object of kind ConfigMap
Param: name::String (required)
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1NamespacedConfigMap(_api::DefaultApi, name::String, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/namespaces/{namespace}/configmaps/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of ConfigMap
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1NamespacedConfigMapList(_api::DefaultApi, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/namespaces/{namespace}/configmaps", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch changes to an object of kind Endpoints
Param: name::String (required)
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1NamespacedEndpoints(_api::DefaultApi, name::String, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/namespaces/{namespace}/endpoints/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of Endpoints
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1NamespacedEndpointsList(_api::DefaultApi, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/namespaces/{namespace}/endpoints", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch changes to an object of kind Event
Param: name::String (required)
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1NamespacedEvent(_api::DefaultApi, name::String, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/namespaces/{namespace}/events/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of Event
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1NamespacedEventList(_api::DefaultApi, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/namespaces/{namespace}/events", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch changes to an object of kind LimitRange
Param: name::String (required)
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1NamespacedLimitRange(_api::DefaultApi, name::String, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/namespaces/{namespace}/limitranges/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of LimitRange
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1NamespacedLimitRangeList(_api::DefaultApi, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/namespaces/{namespace}/limitranges", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch changes to an object of kind PersistentVolumeClaim
Param: name::String (required)
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1NamespacedPersistentVolumeClaim(_api::DefaultApi, name::String, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of PersistentVolumeClaim
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1NamespacedPersistentVolumeClaimList(_api::DefaultApi, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch changes to an object of kind Pod
Param: name::String (required)
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1NamespacedPod(_api::DefaultApi, name::String, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/namespaces/{namespace}/pods/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of Pod
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1NamespacedPodList(_api::DefaultApi, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/namespaces/{namespace}/pods", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch changes to an object of kind PodTemplate
Param: name::String (required)
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1NamespacedPodTemplate(_api::DefaultApi, name::String, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/namespaces/{namespace}/podtemplates/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of PodTemplate
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1NamespacedPodTemplateList(_api::DefaultApi, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/namespaces/{namespace}/podtemplates", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch changes to an object of kind ReplicationController
Param: name::String (required)
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1NamespacedReplicationController(_api::DefaultApi, name::String, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/namespaces/{namespace}/replicationcontrollers/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of ReplicationController
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1NamespacedReplicationControllerList(_api::DefaultApi, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/namespaces/{namespace}/replicationcontrollers", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch changes to an object of kind ResourceQuota
Param: name::String (required)
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1NamespacedResourceQuota(_api::DefaultApi, name::String, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/namespaces/{namespace}/resourcequotas/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of ResourceQuota
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1NamespacedResourceQuotaList(_api::DefaultApi, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/namespaces/{namespace}/resourcequotas", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch changes to an object of kind Secret
Param: name::String (required)
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1NamespacedSecret(_api::DefaultApi, name::String, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/namespaces/{namespace}/secrets/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of Secret
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1NamespacedSecretList(_api::DefaultApi, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/namespaces/{namespace}/secrets", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch changes to an object of kind Service
Param: name::String (required)
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1NamespacedService(_api::DefaultApi, name::String, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/namespaces/{namespace}/services/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch changes to an object of kind ServiceAccount
Param: name::String (required)
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1NamespacedServiceAccount(_api::DefaultApi, name::String, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/namespaces/{namespace}/serviceaccounts/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of ServiceAccount
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1NamespacedServiceAccountList(_api::DefaultApi, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/namespaces/{namespace}/serviceaccounts", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of Service
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1NamespacedServiceList(_api::DefaultApi, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/namespaces/{namespace}/services", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch changes to an object of kind Node
Param: name::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1Node(_api::DefaultApi, name::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/nodes/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of Node
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1NodeList(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/nodes", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch changes to an object of kind PersistentVolume
Param: name::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1PersistentVolume(_api::DefaultApi, name::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/persistentvolumes/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of PersistentVolumeClaim
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1PersistentVolumeClaimListForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/persistentvolumeclaims", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of PersistentVolume
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1PersistentVolumeList(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/persistentvolumes", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of Pod
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1PodListForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/pods", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of PodTemplate
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1PodTemplateListForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/podtemplates", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of ReplicationController
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1ReplicationControllerListForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/replicationcontrollers", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of ResourceQuota
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1ResourceQuotaListForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/resourcequotas", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of Secret
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1SecretListForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/secrets", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of ServiceAccount
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1ServiceAccountListForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/serviceaccounts", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of Service
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchCoreV1ServiceListForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/api/v1/watch/services", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of DaemonSet
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchExtensionsV1beta1DaemonSetListForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/extensions/v1beta1/watch/daemonsets", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of Deployment
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchExtensionsV1beta1DeploymentListForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/extensions/v1beta1/watch/deployments", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of HorizontalPodAutoscaler
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchExtensionsV1beta1HorizontalPodAutoscalerListForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/extensions/v1beta1/watch/horizontalpodautoscalers", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of Ingress
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchExtensionsV1beta1IngressListForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/extensions/v1beta1/watch/ingresses", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of Job
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchExtensionsV1beta1JobListForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/extensions/v1beta1/watch/jobs", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch changes to an object of kind DaemonSet
Param: name::String (required)
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchExtensionsV1beta1NamespacedDaemonSet(_api::DefaultApi, name::String, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/extensions/v1beta1/watch/namespaces/{namespace}/daemonsets/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of DaemonSet
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchExtensionsV1beta1NamespacedDaemonSetList(_api::DefaultApi, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/extensions/v1beta1/watch/namespaces/{namespace}/daemonsets", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch changes to an object of kind Deployment
Param: name::String (required)
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchExtensionsV1beta1NamespacedDeployment(_api::DefaultApi, name::String, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/extensions/v1beta1/watch/namespaces/{namespace}/deployments/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of Deployment
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchExtensionsV1beta1NamespacedDeploymentList(_api::DefaultApi, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/extensions/v1beta1/watch/namespaces/{namespace}/deployments", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch changes to an object of kind HorizontalPodAutoscaler
Param: name::String (required)
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchExtensionsV1beta1NamespacedHorizontalPodAutoscaler(_api::DefaultApi, name::String, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/extensions/v1beta1/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of HorizontalPodAutoscaler
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchExtensionsV1beta1NamespacedHorizontalPodAutoscalerList(_api::DefaultApi, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/extensions/v1beta1/watch/namespaces/{namespace}/horizontalpodautoscalers", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch changes to an object of kind Ingress
Param: name::String (required)
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchExtensionsV1beta1NamespacedIngress(_api::DefaultApi, name::String, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/extensions/v1beta1/watch/namespaces/{namespace}/ingresses/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of Ingress
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchExtensionsV1beta1NamespacedIngressList(_api::DefaultApi, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/extensions/v1beta1/watch/namespaces/{namespace}/ingresses", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch changes to an object of kind Job
Param: name::String (required)
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchExtensionsV1beta1NamespacedJob(_api::DefaultApi, name::String, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/extensions/v1beta1/watch/namespaces/{namespace}/jobs/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of Job
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchExtensionsV1beta1NamespacedJobList(_api::DefaultApi, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/extensions/v1beta1/watch/namespaces/{namespace}/jobs", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch changes to an object of kind NetworkPolicy
Param: name::String (required)
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchExtensionsV1beta1NamespacedNetworkPolicy(_api::DefaultApi, name::String, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/extensions/v1beta1/watch/namespaces/{namespace}/networkpolicies/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of NetworkPolicy
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchExtensionsV1beta1NamespacedNetworkPolicyList(_api::DefaultApi, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/extensions/v1beta1/watch/namespaces/{namespace}/networkpolicies", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch changes to an object of kind ReplicaSet
Param: name::String (required)
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchExtensionsV1beta1NamespacedReplicaSet(_api::DefaultApi, name::String, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/extensions/v1beta1/watch/namespaces/{namespace}/replicasets/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of ReplicaSet
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchExtensionsV1beta1NamespacedReplicaSetList(_api::DefaultApi, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/extensions/v1beta1/watch/namespaces/{namespace}/replicasets", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of NetworkPolicy
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchExtensionsV1beta1NetworkPolicyListForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/extensions/v1beta1/watch/networkpolicies", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of ReplicaSet
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchExtensionsV1beta1ReplicaSetListForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/extensions/v1beta1/watch/replicasets", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch changes to an object of kind ThirdPartyResource
Param: name::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchExtensionsV1beta1ThirdPartyResource(_api::DefaultApi, name::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/extensions/v1beta1/watch/thirdpartyresources/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of ThirdPartyResource
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchExtensionsV1beta1ThirdPartyResourceList(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/extensions/v1beta1/watch/thirdpartyresources", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch changes to an object of kind PodDisruptionBudget
Param: name::String (required)
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchPolicyV1alpha1NamespacedPodDisruptionBudget(_api::DefaultApi, name::String, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/policy/v1alpha1/watch/namespaces/{namespace}/poddisruptionbudgets/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of PodDisruptionBudget
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchPolicyV1alpha1NamespacedPodDisruptionBudgetList(_api::DefaultApi, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/policy/v1alpha1/watch/namespaces/{namespace}/poddisruptionbudgets", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of PodDisruptionBudget
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchPolicyV1alpha1PodDisruptionBudgetListForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/policy/v1alpha1/watch/poddisruptionbudgets", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch changes to an object of kind ClusterRole
Param: name::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchRbacAuthorizationV1alpha1ClusterRole(_api::DefaultApi, name::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterroles/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch changes to an object of kind ClusterRoleBinding
Param: name::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchRbacAuthorizationV1alpha1ClusterRoleBinding(_api::DefaultApi, name::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterrolebindings/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of ClusterRoleBinding
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchRbacAuthorizationV1alpha1ClusterRoleBindingList(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterrolebindings", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of ClusterRole
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchRbacAuthorizationV1alpha1ClusterRoleList(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterroles", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch changes to an object of kind Role
Param: name::String (required)
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchRbacAuthorizationV1alpha1NamespacedRole(_api::DefaultApi, name::String, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/{namespace}/roles/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch changes to an object of kind RoleBinding
Param: name::String (required)
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchRbacAuthorizationV1alpha1NamespacedRoleBinding(_api::DefaultApi, name::String, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/{namespace}/rolebindings/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of RoleBinding
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchRbacAuthorizationV1alpha1NamespacedRoleBindingList(_api::DefaultApi, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/{namespace}/rolebindings", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of Role
Param: namespace::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchRbacAuthorizationV1alpha1NamespacedRoleList(_api::DefaultApi, namespace::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/{namespace}/roles", [])
    Swagger.set_param(_ctx.path, "namespace", namespace)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of RoleBinding
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchRbacAuthorizationV1alpha1RoleBindingListForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/rbac.authorization.k8s.io/v1alpha1/watch/rolebindings", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of Role
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchRbacAuthorizationV1alpha1RoleListForAllNamespaces(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/rbac.authorization.k8s.io/v1alpha1/watch/roles", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch changes to an object of kind StorageClass
Param: name::String (required)
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchStorageV1beta1StorageClass(_api::DefaultApi, name::String; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/storage.k8s.io/v1beta1/watch/storageclasses/{name}", [])
    Swagger.set_param(_ctx.path, "name", name)  # type String
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

watch individual changes to a list of StorageClass
Param: fieldSelector::String
Param: labelSelector::String
Param: pretty::String
Param: resourceVersion::String
Param: timeoutSeconds::Int32
Param: watch::Bool
Return: VersionedEvent
"""
function watchStorageV1beta1StorageClassList(_api::DefaultApi; fieldSelector=nothing, labelSelector=nothing, pretty=nothing, resourceVersion=nothing, timeoutSeconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VersionedEvent, "/apis/storage.k8s.io/v1beta1/watch/storageclasses", [])
    Swagger.set_param(_ctx.query, "fieldSelector", fieldSelector)  # type String
    Swagger.set_param(_ctx.query, "labelSelector", labelSelector)  # type String
    Swagger.set_param(_ctx.query, "pretty", pretty)  # type String
    Swagger.set_param(_ctx.query, "resourceVersion", resourceVersion)  # type String
    Swagger.set_param(_ctx.query, "timeoutSeconds", timeoutSeconds)  # type Int32
    Swagger.set_param(_ctx.query, "watch", watch)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["*/*"] : [_mediaType])
    Swagger.exec(_ctx)
end

export connectCoreV1DeleteNamespacedPodProxy, connectCoreV1DeleteNamespacedPodProxyWithPath, connectCoreV1DeleteNamespacedServiceProxy, connectCoreV1DeleteNamespacedServiceProxyWithPath, connectCoreV1DeleteNodeProxy, connectCoreV1DeleteNodeProxyWithPath, connectCoreV1GetNamespacedPodAttach, connectCoreV1GetNamespacedPodExec, connectCoreV1GetNamespacedPodPortforward, connectCoreV1GetNamespacedPodProxy, connectCoreV1GetNamespacedPodProxyWithPath, connectCoreV1GetNamespacedServiceProxy, connectCoreV1GetNamespacedServiceProxyWithPath, connectCoreV1GetNodeProxy, connectCoreV1GetNodeProxyWithPath, connectCoreV1HeadNamespacedPodProxy, connectCoreV1HeadNamespacedPodProxyWithPath, connectCoreV1HeadNamespacedServiceProxy, connectCoreV1HeadNamespacedServiceProxyWithPath, connectCoreV1HeadNodeProxy, connectCoreV1HeadNodeProxyWithPath, connectCoreV1OptionsNamespacedPodProxy, connectCoreV1OptionsNamespacedPodProxyWithPath, connectCoreV1OptionsNamespacedServiceProxy, connectCoreV1OptionsNamespacedServiceProxyWithPath, connectCoreV1OptionsNodeProxy, connectCoreV1OptionsNodeProxyWithPath, connectCoreV1PostNamespacedPodAttach, connectCoreV1PostNamespacedPodExec, connectCoreV1PostNamespacedPodPortforward, connectCoreV1PostNamespacedPodProxy, connectCoreV1PostNamespacedPodProxyWithPath, connectCoreV1PostNamespacedServiceProxy, connectCoreV1PostNamespacedServiceProxyWithPath, connectCoreV1PostNodeProxy, connectCoreV1PostNodeProxyWithPath, connectCoreV1PutNamespacedPodProxy, connectCoreV1PutNamespacedPodProxyWithPath, connectCoreV1PutNamespacedServiceProxy, connectCoreV1PutNamespacedServiceProxyWithPath, connectCoreV1PutNodeProxy, connectCoreV1PutNodeProxyWithPath, createAppsV1alpha1NamespacedPetSet, createAuthenticationV1beta1TokenReview, createAuthorizationV1beta1NamespacedLocalSubjectAccessReview, createAuthorizationV1beta1SelfSubjectAccessReview, createAuthorizationV1beta1SubjectAccessReview, createAutoscalingV1NamespacedHorizontalPodAutoscaler, createBatchV1NamespacedJob, createCertificatesV1alpha1CertificateSigningRequest, createCoreV1Namespace, createCoreV1NamespacedBinding, createCoreV1NamespacedBindingBinding, createCoreV1NamespacedConfigMap, createCoreV1NamespacedEndpoints, createCoreV1NamespacedEvent, createCoreV1NamespacedEvictionEviction, createCoreV1NamespacedLimitRange, createCoreV1NamespacedPersistentVolumeClaim, createCoreV1NamespacedPod, createCoreV1NamespacedPodTemplate, createCoreV1NamespacedReplicationController, createCoreV1NamespacedResourceQuota, createCoreV1NamespacedSecret, createCoreV1NamespacedService, createCoreV1NamespacedServiceAccount, createCoreV1Node, createCoreV1PersistentVolume, createExtensionsV1beta1NamespacedDaemonSet, createExtensionsV1beta1NamespacedDeployment, createExtensionsV1beta1NamespacedDeploymentRollbackRollback, createExtensionsV1beta1NamespacedHorizontalPodAutoscaler, createExtensionsV1beta1NamespacedIngress, createExtensionsV1beta1NamespacedJob, createExtensionsV1beta1NamespacedNetworkPolicy, createExtensionsV1beta1NamespacedReplicaSet, createExtensionsV1beta1ThirdPartyResource, createPolicyV1alpha1NamespacedPodDisruptionBudget, createRbacAuthorizationV1alpha1ClusterRole, createRbacAuthorizationV1alpha1ClusterRoleBinding, createRbacAuthorizationV1alpha1NamespacedRole, createRbacAuthorizationV1alpha1NamespacedRoleBinding, createStorageV1beta1StorageClass, deleteAppsV1alpha1CollectionNamespacedPetSet, deleteAppsV1alpha1NamespacedPetSet, deleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscaler, deleteAutoscalingV1NamespacedHorizontalPodAutoscaler, deleteBatchV1CollectionNamespacedJob, deleteBatchV1NamespacedJob, deleteCertificatesV1alpha1CertificateSigningRequest, deleteCertificatesV1alpha1CollectionCertificateSigningRequest, deleteCoreV1CollectionNamespace, deleteCoreV1CollectionNamespacedConfigMap, deleteCoreV1CollectionNamespacedEndpoints, deleteCoreV1CollectionNamespacedEvent, deleteCoreV1CollectionNamespacedLimitRange, deleteCoreV1CollectionNamespacedPersistentVolumeClaim, deleteCoreV1CollectionNamespacedPod, deleteCoreV1CollectionNamespacedPodTemplate, deleteCoreV1CollectionNamespacedReplicationController, deleteCoreV1CollectionNamespacedResourceQuota, deleteCoreV1CollectionNamespacedSecret, deleteCoreV1CollectionNamespacedServiceAccount, deleteCoreV1CollectionNode, deleteCoreV1CollectionPersistentVolume, deleteCoreV1Namespace, deleteCoreV1NamespacedConfigMap, deleteCoreV1NamespacedEndpoints, deleteCoreV1NamespacedEvent, deleteCoreV1NamespacedLimitRange, deleteCoreV1NamespacedPersistentVolumeClaim, deleteCoreV1NamespacedPod, deleteCoreV1NamespacedPodTemplate, deleteCoreV1NamespacedReplicationController, deleteCoreV1NamespacedResourceQuota, deleteCoreV1NamespacedSecret, deleteCoreV1NamespacedService, deleteCoreV1NamespacedServiceAccount, deleteCoreV1Node, deleteCoreV1PersistentVolume, deleteExtensionsV1beta1CollectionNamespacedDaemonSet, deleteExtensionsV1beta1CollectionNamespacedDeployment, deleteExtensionsV1beta1CollectionNamespacedHorizontalPodAutoscaler, deleteExtensionsV1beta1CollectionNamespacedIngress, deleteExtensionsV1beta1CollectionNamespacedJob, deleteExtensionsV1beta1CollectionNamespacedNetworkPolicy, deleteExtensionsV1beta1CollectionNamespacedReplicaSet, deleteExtensionsV1beta1CollectionThirdPartyResource, deleteExtensionsV1beta1NamespacedDaemonSet, deleteExtensionsV1beta1NamespacedDeployment, deleteExtensionsV1beta1NamespacedHorizontalPodAutoscaler, deleteExtensionsV1beta1NamespacedIngress, deleteExtensionsV1beta1NamespacedJob, deleteExtensionsV1beta1NamespacedNetworkPolicy, deleteExtensionsV1beta1NamespacedReplicaSet, deleteExtensionsV1beta1ThirdPartyResource, deletePolicyV1alpha1CollectionNamespacedPodDisruptionBudget, deletePolicyV1alpha1NamespacedPodDisruptionBudget, deleteRbacAuthorizationV1alpha1ClusterRole, deleteRbacAuthorizationV1alpha1ClusterRoleBinding, deleteRbacAuthorizationV1alpha1CollectionClusterRole, deleteRbacAuthorizationV1alpha1CollectionClusterRoleBinding, deleteRbacAuthorizationV1alpha1CollectionNamespacedRole, deleteRbacAuthorizationV1alpha1CollectionNamespacedRoleBinding, deleteRbacAuthorizationV1alpha1NamespacedRole, deleteRbacAuthorizationV1alpha1NamespacedRoleBinding, deleteStorageV1beta1CollectionStorageClass, deleteStorageV1beta1StorageClass, getAPIVersions, getAppsAPIGroup, getAppsV1alpha1APIResources, getAuthenticationAPIGroup, getAuthenticationV1beta1APIResources, getAuthorizationAPIGroup, getAuthorizationV1beta1APIResources, getAutoscalingAPIGroup, getAutoscalingV1APIResources, getBatchAPIGroup, getBatchV1APIResources, getBatchV2alpha1APIResources, getCertificatesAPIGroup, getCertificatesV1alpha1APIResources, getCodeVersion, getCoreAPIVersions, getCoreV1APIResources, getExtensionsAPIGroup, getExtensionsV1beta1APIResources, getPolicyAPIGroup, getPolicyV1alpha1APIResources, getRbacAuthorizationAPIGroup, getRbacAuthorizationV1alpha1APIResources, getStorageAPIGroup, getStorageV1beta1APIResources, listAppsV1alpha1NamespacedPetSet, listAppsV1alpha1PetSetForAllNamespaces, listAutoscalingV1HorizontalPodAutoscalerForAllNamespaces, listAutoscalingV1NamespacedHorizontalPodAutoscaler, listBatchV1JobForAllNamespaces, listBatchV1NamespacedJob, listCertificatesV1alpha1CertificateSigningRequest, listCoreV1ComponentStatus, listCoreV1ConfigMapForAllNamespaces, listCoreV1EndpointsForAllNamespaces, listCoreV1EventForAllNamespaces, listCoreV1LimitRangeForAllNamespaces, listCoreV1Namespace, listCoreV1NamespacedConfigMap, listCoreV1NamespacedEndpoints, listCoreV1NamespacedEvent, listCoreV1NamespacedLimitRange, listCoreV1NamespacedPersistentVolumeClaim, listCoreV1NamespacedPod, listCoreV1NamespacedPodTemplate, listCoreV1NamespacedReplicationController, listCoreV1NamespacedResourceQuota, listCoreV1NamespacedSecret, listCoreV1NamespacedService, listCoreV1NamespacedServiceAccount, listCoreV1Node, listCoreV1PersistentVolume, listCoreV1PersistentVolumeClaimForAllNamespaces, listCoreV1PodForAllNamespaces, listCoreV1PodTemplateForAllNamespaces, listCoreV1ReplicationControllerForAllNamespaces, listCoreV1ResourceQuotaForAllNamespaces, listCoreV1SecretForAllNamespaces, listCoreV1ServiceAccountForAllNamespaces, listCoreV1ServiceForAllNamespaces, listExtensionsV1beta1DaemonSetForAllNamespaces, listExtensionsV1beta1DeploymentForAllNamespaces, listExtensionsV1beta1HorizontalPodAutoscalerForAllNamespaces, listExtensionsV1beta1IngressForAllNamespaces, listExtensionsV1beta1JobForAllNamespaces, listExtensionsV1beta1NamespacedDaemonSet, listExtensionsV1beta1NamespacedDeployment, listExtensionsV1beta1NamespacedHorizontalPodAutoscaler, listExtensionsV1beta1NamespacedIngress, listExtensionsV1beta1NamespacedJob, listExtensionsV1beta1NamespacedNetworkPolicy, listExtensionsV1beta1NamespacedReplicaSet, listExtensionsV1beta1NetworkPolicyForAllNamespaces, listExtensionsV1beta1ReplicaSetForAllNamespaces, listExtensionsV1beta1ThirdPartyResource, listPolicyV1alpha1NamespacedPodDisruptionBudget, listPolicyV1alpha1PodDisruptionBudgetForAllNamespaces, listRbacAuthorizationV1alpha1ClusterRole, listRbacAuthorizationV1alpha1ClusterRoleBinding, listRbacAuthorizationV1alpha1NamespacedRole, listRbacAuthorizationV1alpha1NamespacedRoleBinding, listRbacAuthorizationV1alpha1RoleBindingForAllNamespaces, listRbacAuthorizationV1alpha1RoleForAllNamespaces, listStorageV1beta1StorageClass, logFileHandler, logFileListHandler, patchAppsV1alpha1NamespacedPetSet, patchAppsV1alpha1NamespacedPetSetStatus, patchAutoscalingV1NamespacedHorizontalPodAutoscaler, patchAutoscalingV1NamespacedHorizontalPodAutoscalerStatus, patchBatchV1NamespacedJob, patchBatchV1NamespacedJobStatus, patchCertificatesV1alpha1CertificateSigningRequest, patchCoreV1Namespace, patchCoreV1NamespaceStatus, patchCoreV1NamespacedConfigMap, patchCoreV1NamespacedEndpoints, patchCoreV1NamespacedEvent, patchCoreV1NamespacedLimitRange, patchCoreV1NamespacedPersistentVolumeClaim, patchCoreV1NamespacedPersistentVolumeClaimStatus, patchCoreV1NamespacedPod, patchCoreV1NamespacedPodStatus, patchCoreV1NamespacedPodTemplate, patchCoreV1NamespacedReplicationController, patchCoreV1NamespacedReplicationControllerStatus, patchCoreV1NamespacedResourceQuota, patchCoreV1NamespacedResourceQuotaStatus, patchCoreV1NamespacedScaleScale, patchCoreV1NamespacedSecret, patchCoreV1NamespacedService, patchCoreV1NamespacedServiceAccount, patchCoreV1NamespacedServiceStatus, patchCoreV1Node, patchCoreV1NodeStatus, patchCoreV1PersistentVolume, patchCoreV1PersistentVolumeStatus, patchExtensionsV1beta1NamespacedDaemonSet, patchExtensionsV1beta1NamespacedDaemonSetStatus, patchExtensionsV1beta1NamespacedDeployment, patchExtensionsV1beta1NamespacedDeploymentStatus, patchExtensionsV1beta1NamespacedDeploymentsScale, patchExtensionsV1beta1NamespacedHorizontalPodAutoscaler, patchExtensionsV1beta1NamespacedHorizontalPodAutoscalerStatus, patchExtensionsV1beta1NamespacedIngress, patchExtensionsV1beta1NamespacedIngressStatus, patchExtensionsV1beta1NamespacedJob, patchExtensionsV1beta1NamespacedJobStatus, patchExtensionsV1beta1NamespacedNetworkPolicy, patchExtensionsV1beta1NamespacedReplicaSet, patchExtensionsV1beta1NamespacedReplicaSetStatus, patchExtensionsV1beta1NamespacedReplicasetsScale, patchExtensionsV1beta1NamespacedReplicationcontrollersScale, patchExtensionsV1beta1ThirdPartyResource, patchPolicyV1alpha1NamespacedPodDisruptionBudget, patchPolicyV1alpha1NamespacedPodDisruptionBudgetStatus, patchRbacAuthorizationV1alpha1ClusterRole, patchRbacAuthorizationV1alpha1ClusterRoleBinding, patchRbacAuthorizationV1alpha1NamespacedRole, patchRbacAuthorizationV1alpha1NamespacedRoleBinding, patchStorageV1beta1StorageClass, proxyCoreV1DELETENamespacedPod, proxyCoreV1DELETENamespacedPodWithPath, proxyCoreV1DELETENamespacedService, proxyCoreV1DELETENamespacedServiceWithPath, proxyCoreV1DELETENode, proxyCoreV1DELETENodeWithPath, proxyCoreV1GETNamespacedPod, proxyCoreV1GETNamespacedPodWithPath, proxyCoreV1GETNamespacedService, proxyCoreV1GETNamespacedServiceWithPath, proxyCoreV1GETNode, proxyCoreV1GETNodeWithPath, proxyCoreV1HEADNamespacedPod, proxyCoreV1HEADNamespacedPodWithPath, proxyCoreV1HEADNamespacedService, proxyCoreV1HEADNamespacedServiceWithPath, proxyCoreV1HEADNode, proxyCoreV1HEADNodeWithPath, proxyCoreV1OPTIONSNamespacedPod, proxyCoreV1OPTIONSNamespacedPodWithPath, proxyCoreV1OPTIONSNamespacedService, proxyCoreV1OPTIONSNamespacedServiceWithPath, proxyCoreV1OPTIONSNode, proxyCoreV1OPTIONSNodeWithPath, proxyCoreV1POSTNamespacedPod, proxyCoreV1POSTNamespacedPodWithPath, proxyCoreV1POSTNamespacedService, proxyCoreV1POSTNamespacedServiceWithPath, proxyCoreV1POSTNode, proxyCoreV1POSTNodeWithPath, proxyCoreV1PUTNamespacedPod, proxyCoreV1PUTNamespacedPodWithPath, proxyCoreV1PUTNamespacedService, proxyCoreV1PUTNamespacedServiceWithPath, proxyCoreV1PUTNode, proxyCoreV1PUTNodeWithPath, readAppsV1alpha1NamespacedPetSet, readAppsV1alpha1NamespacedPetSetStatus, readAutoscalingV1NamespacedHorizontalPodAutoscaler, readAutoscalingV1NamespacedHorizontalPodAutoscalerStatus, readBatchV1NamespacedJob, readBatchV1NamespacedJobStatus, readCertificatesV1alpha1CertificateSigningRequest, readCoreV1ComponentStatus, readCoreV1Namespace, readCoreV1NamespaceStatus, readCoreV1NamespacedConfigMap, readCoreV1NamespacedEndpoints, readCoreV1NamespacedEvent, readCoreV1NamespacedLimitRange, readCoreV1NamespacedPersistentVolumeClaim, readCoreV1NamespacedPersistentVolumeClaimStatus, readCoreV1NamespacedPod, readCoreV1NamespacedPodLog, readCoreV1NamespacedPodStatus, readCoreV1NamespacedPodTemplate, readCoreV1NamespacedReplicationController, readCoreV1NamespacedReplicationControllerStatus, readCoreV1NamespacedResourceQuota, readCoreV1NamespacedResourceQuotaStatus, readCoreV1NamespacedScaleScale, readCoreV1NamespacedSecret, readCoreV1NamespacedService, readCoreV1NamespacedServiceAccount, readCoreV1NamespacedServiceStatus, readCoreV1Node, readCoreV1NodeStatus, readCoreV1PersistentVolume, readCoreV1PersistentVolumeStatus, readExtensionsV1beta1NamespacedDaemonSet, readExtensionsV1beta1NamespacedDaemonSetStatus, readExtensionsV1beta1NamespacedDeployment, readExtensionsV1beta1NamespacedDeploymentStatus, readExtensionsV1beta1NamespacedDeploymentsScale, readExtensionsV1beta1NamespacedHorizontalPodAutoscaler, readExtensionsV1beta1NamespacedHorizontalPodAutoscalerStatus, readExtensionsV1beta1NamespacedIngress, readExtensionsV1beta1NamespacedIngressStatus, readExtensionsV1beta1NamespacedJob, readExtensionsV1beta1NamespacedJobStatus, readExtensionsV1beta1NamespacedNetworkPolicy, readExtensionsV1beta1NamespacedReplicaSet, readExtensionsV1beta1NamespacedReplicaSetStatus, readExtensionsV1beta1NamespacedReplicasetsScale, readExtensionsV1beta1NamespacedReplicationcontrollersScale, readExtensionsV1beta1ThirdPartyResource, readPolicyV1alpha1NamespacedPodDisruptionBudget, readPolicyV1alpha1NamespacedPodDisruptionBudgetStatus, readRbacAuthorizationV1alpha1ClusterRole, readRbacAuthorizationV1alpha1ClusterRoleBinding, readRbacAuthorizationV1alpha1NamespacedRole, readRbacAuthorizationV1alpha1NamespacedRoleBinding, readStorageV1beta1StorageClass, replaceAppsV1alpha1NamespacedPetSet, replaceAppsV1alpha1NamespacedPetSetStatus, replaceAutoscalingV1NamespacedHorizontalPodAutoscaler, replaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatus, replaceBatchV1NamespacedJob, replaceBatchV1NamespacedJobStatus, replaceCertificatesV1alpha1CertificateSigningRequest, replaceCertificatesV1alpha1CertificateSigningRequestApproval, replaceCertificatesV1alpha1CertificateSigningRequestStatus, replaceCoreV1Namespace, replaceCoreV1NamespaceFinalize, replaceCoreV1NamespaceStatus, replaceCoreV1NamespacedConfigMap, replaceCoreV1NamespacedEndpoints, replaceCoreV1NamespacedEvent, replaceCoreV1NamespacedLimitRange, replaceCoreV1NamespacedPersistentVolumeClaim, replaceCoreV1NamespacedPersistentVolumeClaimStatus, replaceCoreV1NamespacedPod, replaceCoreV1NamespacedPodStatus, replaceCoreV1NamespacedPodTemplate, replaceCoreV1NamespacedReplicationController, replaceCoreV1NamespacedReplicationControllerStatus, replaceCoreV1NamespacedResourceQuota, replaceCoreV1NamespacedResourceQuotaStatus, replaceCoreV1NamespacedScaleScale, replaceCoreV1NamespacedSecret, replaceCoreV1NamespacedService, replaceCoreV1NamespacedServiceAccount, replaceCoreV1NamespacedServiceStatus, replaceCoreV1Node, replaceCoreV1NodeStatus, replaceCoreV1PersistentVolume, replaceCoreV1PersistentVolumeStatus, replaceExtensionsV1beta1NamespacedDaemonSet, replaceExtensionsV1beta1NamespacedDaemonSetStatus, replaceExtensionsV1beta1NamespacedDeployment, replaceExtensionsV1beta1NamespacedDeploymentStatus, replaceExtensionsV1beta1NamespacedDeploymentsScale, replaceExtensionsV1beta1NamespacedHorizontalPodAutoscaler, replaceExtensionsV1beta1NamespacedHorizontalPodAutoscalerStatus, replaceExtensionsV1beta1NamespacedIngress, replaceExtensionsV1beta1NamespacedIngressStatus, replaceExtensionsV1beta1NamespacedJob, replaceExtensionsV1beta1NamespacedJobStatus, replaceExtensionsV1beta1NamespacedNetworkPolicy, replaceExtensionsV1beta1NamespacedReplicaSet, replaceExtensionsV1beta1NamespacedReplicaSetStatus, replaceExtensionsV1beta1NamespacedReplicasetsScale, replaceExtensionsV1beta1NamespacedReplicationcontrollersScale, replaceExtensionsV1beta1ThirdPartyResource, replacePolicyV1alpha1NamespacedPodDisruptionBudget, replacePolicyV1alpha1NamespacedPodDisruptionBudgetStatus, replaceRbacAuthorizationV1alpha1ClusterRole, replaceRbacAuthorizationV1alpha1ClusterRoleBinding, replaceRbacAuthorizationV1alpha1NamespacedRole, replaceRbacAuthorizationV1alpha1NamespacedRoleBinding, replaceStorageV1beta1StorageClass, watchAppsV1alpha1NamespacedPetSet, watchAppsV1alpha1NamespacedPetSetList, watchAppsV1alpha1PetSetListForAllNamespaces, watchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces, watchAutoscalingV1NamespacedHorizontalPodAutoscaler, watchAutoscalingV1NamespacedHorizontalPodAutoscalerList, watchBatchV1JobListForAllNamespaces, watchBatchV1NamespacedJob, watchBatchV1NamespacedJobList, watchCertificatesV1alpha1CertificateSigningRequest, watchCertificatesV1alpha1CertificateSigningRequestList, watchCoreV1ConfigMapListForAllNamespaces, watchCoreV1EndpointsListForAllNamespaces, watchCoreV1EventListForAllNamespaces, watchCoreV1LimitRangeListForAllNamespaces, watchCoreV1Namespace, watchCoreV1NamespaceList, watchCoreV1NamespacedConfigMap, watchCoreV1NamespacedConfigMapList, watchCoreV1NamespacedEndpoints, watchCoreV1NamespacedEndpointsList, watchCoreV1NamespacedEvent, watchCoreV1NamespacedEventList, watchCoreV1NamespacedLimitRange, watchCoreV1NamespacedLimitRangeList, watchCoreV1NamespacedPersistentVolumeClaim, watchCoreV1NamespacedPersistentVolumeClaimList, watchCoreV1NamespacedPod, watchCoreV1NamespacedPodList, watchCoreV1NamespacedPodTemplate, watchCoreV1NamespacedPodTemplateList, watchCoreV1NamespacedReplicationController, watchCoreV1NamespacedReplicationControllerList, watchCoreV1NamespacedResourceQuota, watchCoreV1NamespacedResourceQuotaList, watchCoreV1NamespacedSecret, watchCoreV1NamespacedSecretList, watchCoreV1NamespacedService, watchCoreV1NamespacedServiceAccount, watchCoreV1NamespacedServiceAccountList, watchCoreV1NamespacedServiceList, watchCoreV1Node, watchCoreV1NodeList, watchCoreV1PersistentVolume, watchCoreV1PersistentVolumeClaimListForAllNamespaces, watchCoreV1PersistentVolumeList, watchCoreV1PodListForAllNamespaces, watchCoreV1PodTemplateListForAllNamespaces, watchCoreV1ReplicationControllerListForAllNamespaces, watchCoreV1ResourceQuotaListForAllNamespaces, watchCoreV1SecretListForAllNamespaces, watchCoreV1ServiceAccountListForAllNamespaces, watchCoreV1ServiceListForAllNamespaces, watchExtensionsV1beta1DaemonSetListForAllNamespaces, watchExtensionsV1beta1DeploymentListForAllNamespaces, watchExtensionsV1beta1HorizontalPodAutoscalerListForAllNamespaces, watchExtensionsV1beta1IngressListForAllNamespaces, watchExtensionsV1beta1JobListForAllNamespaces, watchExtensionsV1beta1NamespacedDaemonSet, watchExtensionsV1beta1NamespacedDaemonSetList, watchExtensionsV1beta1NamespacedDeployment, watchExtensionsV1beta1NamespacedDeploymentList, watchExtensionsV1beta1NamespacedHorizontalPodAutoscaler, watchExtensionsV1beta1NamespacedHorizontalPodAutoscalerList, watchExtensionsV1beta1NamespacedIngress, watchExtensionsV1beta1NamespacedIngressList, watchExtensionsV1beta1NamespacedJob, watchExtensionsV1beta1NamespacedJobList, watchExtensionsV1beta1NamespacedNetworkPolicy, watchExtensionsV1beta1NamespacedNetworkPolicyList, watchExtensionsV1beta1NamespacedReplicaSet, watchExtensionsV1beta1NamespacedReplicaSetList, watchExtensionsV1beta1NetworkPolicyListForAllNamespaces, watchExtensionsV1beta1ReplicaSetListForAllNamespaces, watchExtensionsV1beta1ThirdPartyResource, watchExtensionsV1beta1ThirdPartyResourceList, watchPolicyV1alpha1NamespacedPodDisruptionBudget, watchPolicyV1alpha1NamespacedPodDisruptionBudgetList, watchPolicyV1alpha1PodDisruptionBudgetListForAllNamespaces, watchRbacAuthorizationV1alpha1ClusterRole, watchRbacAuthorizationV1alpha1ClusterRoleBinding, watchRbacAuthorizationV1alpha1ClusterRoleBindingList, watchRbacAuthorizationV1alpha1ClusterRoleList, watchRbacAuthorizationV1alpha1NamespacedRole, watchRbacAuthorizationV1alpha1NamespacedRoleBinding, watchRbacAuthorizationV1alpha1NamespacedRoleBindingList, watchRbacAuthorizationV1alpha1NamespacedRoleList, watchRbacAuthorizationV1alpha1RoleBindingListForAllNamespaces, watchRbacAuthorizationV1alpha1RoleListForAllNamespaces, watchStorageV1beta1StorageClass, watchStorageV1beta1StorageClassList
