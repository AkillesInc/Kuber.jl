# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct IoK8sApiFlowcontrolV1alpha1LimitResponse <: SwaggerModel
    queuing::Any # spec type: Union{ Nothing, IoK8sApiFlowcontrolV1alpha1QueuingConfiguration } # spec name: queuing
    type::Any # spec type: Union{ Nothing, String } # spec name: type

    function IoK8sApiFlowcontrolV1alpha1LimitResponse(;queuing=nothing, type=nothing)
        o = new()
        validate_property(IoK8sApiFlowcontrolV1alpha1LimitResponse, Symbol("queuing"), queuing)
        setfield!(o, Symbol("queuing"), queuing)
        validate_property(IoK8sApiFlowcontrolV1alpha1LimitResponse, Symbol("type"), type)
        setfield!(o, Symbol("type"), type)
        o
    end
end # type IoK8sApiFlowcontrolV1alpha1LimitResponse

const _property_map_IoK8sApiFlowcontrolV1alpha1LimitResponse = Dict{Symbol,Symbol}(Symbol("queuing")=>Symbol("queuing"), Symbol("type")=>Symbol("type"))
const _property_types_IoK8sApiFlowcontrolV1alpha1LimitResponse = Dict{Symbol,String}(Symbol("queuing")=>"IoK8sApiFlowcontrolV1alpha1QueuingConfiguration", Symbol("type")=>"String")
Base.propertynames(::Type{ IoK8sApiFlowcontrolV1alpha1LimitResponse }) = collect(keys(_property_map_IoK8sApiFlowcontrolV1alpha1LimitResponse))
Swagger.property_type(::Type{ IoK8sApiFlowcontrolV1alpha1LimitResponse }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiFlowcontrolV1alpha1LimitResponse[name]))}
Swagger.field_name(::Type{ IoK8sApiFlowcontrolV1alpha1LimitResponse }, property_name::Symbol) =  _property_map_IoK8sApiFlowcontrolV1alpha1LimitResponse[property_name]

function check_required(o::IoK8sApiFlowcontrolV1alpha1LimitResponse)
    (getproperty(o, Symbol("type")) === nothing) && (return false)
    true
end

function validate_property(::Type{ IoK8sApiFlowcontrolV1alpha1LimitResponse }, name::Symbol, val)
end
