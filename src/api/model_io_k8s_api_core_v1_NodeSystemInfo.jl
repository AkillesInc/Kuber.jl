# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

type IoK8sApiCoreV1NodeSystemInfo <: SwaggerModel
    architecture::Nullable{ String } # architecture
    bootID::Nullable{ String } # bootID
    containerRuntimeVersion::Nullable{ String } # containerRuntimeVersion
    kernelVersion::Nullable{ String } # kernelVersion
    kubeProxyVersion::Nullable{ String } # kubeProxyVersion
    kubeletVersion::Nullable{ String } # kubeletVersion
    machineID::Nullable{ String } # machineID
    operatingSystem::Nullable{ String } # operatingSystem
    osImage::Nullable{ String } # osImage
    systemUUID::Nullable{ String } # systemUUID

    function IoK8sApiCoreV1NodeSystemInfo(;architecture=nothing, bootID=nothing, containerRuntimeVersion=nothing, kernelVersion=nothing, kubeProxyVersion=nothing, kubeletVersion=nothing, machineID=nothing, operatingSystem=nothing, osImage=nothing, systemUUID=nothing)
        o = new()
        set_field!(o, :architecture, architecture)
        set_field!(o, :bootID, bootID)
        set_field!(o, :containerRuntimeVersion, containerRuntimeVersion)
        set_field!(o, :kernelVersion, kernelVersion)
        set_field!(o, :kubeProxyVersion, kubeProxyVersion)
        set_field!(o, :kubeletVersion, kubeletVersion)
        set_field!(o, :machineID, machineID)
        set_field!(o, :operatingSystem, operatingSystem)
        set_field!(o, :osImage, osImage)
        set_field!(o, :systemUUID, systemUUID)
        o
    end
end # type IoK8sApiCoreV1NodeSystemInfo

const _name_map_IoK8sApiCoreV1NodeSystemInfo = Dict{String,Symbol}(["architecture"=>:architecture, "bootID"=>:bootID, "containerRuntimeVersion"=>:containerRuntimeVersion, "kernelVersion"=>:kernelVersion, "kubeProxyVersion"=>:kubeProxyVersion, "kubeletVersion"=>:kubeletVersion, "machineID"=>:machineID, "operatingSystem"=>:operatingSystem, "osImage"=>:osImage, "systemUUID"=>:systemUUID])
const _field_map_IoK8sApiCoreV1NodeSystemInfo = Dict{Symbol,String}([:architecture=>"architecture", :bootID=>"bootID", :containerRuntimeVersion=>"containerRuntimeVersion", :kernelVersion=>"kernelVersion", :kubeProxyVersion=>"kubeProxyVersion", :kubeletVersion=>"kubeletVersion", :machineID=>"machineID", :operatingSystem=>"operatingSystem", :osImage=>"osImage", :systemUUID=>"systemUUID"])
Swagger.name_map(::Type{ IoK8sApiCoreV1NodeSystemInfo }) = _name_map_IoK8sApiCoreV1NodeSystemInfo
Swagger.field_map(::Type{ IoK8sApiCoreV1NodeSystemInfo }) = _field_map_IoK8sApiCoreV1NodeSystemInfo

function check_required(o::IoK8sApiCoreV1NodeSystemInfo)
    isnull(o.architecture) && (return false)
    isnull(o.bootID) && (return false)
    isnull(o.containerRuntimeVersion) && (return false)
    isnull(o.kernelVersion) && (return false)
    isnull(o.kubeProxyVersion) && (return false)
    isnull(o.kubeletVersion) && (return false)
    isnull(o.machineID) && (return false)
    isnull(o.operatingSystem) && (return false)
    isnull(o.osImage) && (return false)
    isnull(o.systemUUID) && (return false)
    true
end

function validate_field(o::IoK8sApiCoreV1NodeSystemInfo, name::Symbol, val)
end
