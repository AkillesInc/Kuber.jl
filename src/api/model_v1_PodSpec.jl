# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

type V1PodSpec <: SwaggerModel
    activeDeadlineSeconds::Nullable{ Int64 } # activeDeadlineSeconds
    containers::Nullable{ Vector{V1Container} } # containers
    dnsPolicy::Nullable{ String } # dnsPolicy
    hostIPC::Nullable{ Bool } # hostIPC
    hostNetwork::Nullable{ Bool } # hostNetwork
    hostPID::Nullable{ Bool } # hostPID
    hostname::Nullable{ String } # hostname
    imagePullSecrets::Nullable{ Vector{V1LocalObjectReference} } # imagePullSecrets
    nodeName::Nullable{ String } # nodeName
    nodeSelector::Nullable{ Dict{String, String} } # nodeSelector
    restartPolicy::Nullable{ String } # restartPolicy
    securityContext::Nullable{ V1PodSecurityContext } # securityContext
    serviceAccount::Nullable{ String } # serviceAccount
    serviceAccountName::Nullable{ String } # serviceAccountName
    subdomain::Nullable{ String } # subdomain
    terminationGracePeriodSeconds::Nullable{ Int64 } # terminationGracePeriodSeconds
    volumes::Nullable{ Vector{V1Volume} } # volumes

    function V1PodSpec(;activeDeadlineSeconds=nothing, containers=nothing, dnsPolicy=nothing, hostIPC=nothing, hostNetwork=nothing, hostPID=nothing, hostname=nothing, imagePullSecrets=nothing, nodeName=nothing, nodeSelector=nothing, restartPolicy=nothing, securityContext=nothing, serviceAccount=nothing, serviceAccountName=nothing, subdomain=nothing, terminationGracePeriodSeconds=nothing, volumes=nothing)
        o = new()
        set_field!(o, :activeDeadlineSeconds, activeDeadlineSeconds)
        set_field!(o, :containers, containers)
        set_field!(o, :dnsPolicy, dnsPolicy)
        set_field!(o, :hostIPC, hostIPC)
        set_field!(o, :hostNetwork, hostNetwork)
        set_field!(o, :hostPID, hostPID)
        set_field!(o, :hostname, hostname)
        set_field!(o, :imagePullSecrets, imagePullSecrets)
        set_field!(o, :nodeName, nodeName)
        set_field!(o, :nodeSelector, nodeSelector)
        set_field!(o, :restartPolicy, restartPolicy)
        set_field!(o, :securityContext, securityContext)
        set_field!(o, :serviceAccount, serviceAccount)
        set_field!(o, :serviceAccountName, serviceAccountName)
        set_field!(o, :subdomain, subdomain)
        set_field!(o, :terminationGracePeriodSeconds, terminationGracePeriodSeconds)
        set_field!(o, :volumes, volumes)
        o
    end
end # type V1PodSpec

const _name_map_V1PodSpec = Dict{String,Symbol}(["activeDeadlineSeconds"=>:activeDeadlineSeconds, "containers"=>:containers, "dnsPolicy"=>:dnsPolicy, "hostIPC"=>:hostIPC, "hostNetwork"=>:hostNetwork, "hostPID"=>:hostPID, "hostname"=>:hostname, "imagePullSecrets"=>:imagePullSecrets, "nodeName"=>:nodeName, "nodeSelector"=>:nodeSelector, "restartPolicy"=>:restartPolicy, "securityContext"=>:securityContext, "serviceAccount"=>:serviceAccount, "serviceAccountName"=>:serviceAccountName, "subdomain"=>:subdomain, "terminationGracePeriodSeconds"=>:terminationGracePeriodSeconds, "volumes"=>:volumes])
const _field_map_V1PodSpec = Dict{Symbol,String}([:activeDeadlineSeconds=>"activeDeadlineSeconds", :containers=>"containers", :dnsPolicy=>"dnsPolicy", :hostIPC=>"hostIPC", :hostNetwork=>"hostNetwork", :hostPID=>"hostPID", :hostname=>"hostname", :imagePullSecrets=>"imagePullSecrets", :nodeName=>"nodeName", :nodeSelector=>"nodeSelector", :restartPolicy=>"restartPolicy", :securityContext=>"securityContext", :serviceAccount=>"serviceAccount", :serviceAccountName=>"serviceAccountName", :subdomain=>"subdomain", :terminationGracePeriodSeconds=>"terminationGracePeriodSeconds", :volumes=>"volumes"])
Swagger.name_map(::Type{ V1PodSpec }) = _name_map_V1PodSpec
Swagger.field_map(::Type{ V1PodSpec }) = _field_map_V1PodSpec

function check_required(o::V1PodSpec)
    isnull(o.containers) && (return false)
    true
end

function validate_field(o::V1PodSpec, name::Symbol, val)
end
