# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

type IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec <: SwaggerModel
    maxReplicas::Nullable{ Int32 } # maxReplicas
    minReplicas::Nullable{ Int32 } # minReplicas
    scaleTargetRef::Nullable{ IoK8sApiAutoscalingV1CrossVersionObjectReference } # scaleTargetRef
    targetCPUUtilizationPercentage::Nullable{ Int32 } # targetCPUUtilizationPercentage

    function IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec(;maxReplicas=nothing, minReplicas=nothing, scaleTargetRef=nothing, targetCPUUtilizationPercentage=nothing)
        o = new()
        set_field!(o, :maxReplicas, maxReplicas)
        set_field!(o, :minReplicas, minReplicas)
        set_field!(o, :scaleTargetRef, scaleTargetRef)
        set_field!(o, :targetCPUUtilizationPercentage, targetCPUUtilizationPercentage)
        o
    end
end # type IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec

const _name_map_IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec = Dict{String,Symbol}(["maxReplicas"=>:maxReplicas, "minReplicas"=>:minReplicas, "scaleTargetRef"=>:scaleTargetRef, "targetCPUUtilizationPercentage"=>:targetCPUUtilizationPercentage])
const _field_map_IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec = Dict{Symbol,String}([:maxReplicas=>"maxReplicas", :minReplicas=>"minReplicas", :scaleTargetRef=>"scaleTargetRef", :targetCPUUtilizationPercentage=>"targetCPUUtilizationPercentage"])
Swagger.name_map(::Type{ IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec }) = _name_map_IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec
Swagger.field_map(::Type{ IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec }) = _field_map_IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec

function check_required(o::IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec)
    isnull(o.maxReplicas) && (return false)
    isnull(o.scaleTargetRef) && (return false)
    true
end

function validate_field(o::IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec, name::Symbol, val)
end
